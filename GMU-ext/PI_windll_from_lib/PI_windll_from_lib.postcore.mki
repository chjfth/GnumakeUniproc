
ifeq ($(_WDFL_isDLL),1)
############################################################################
### Code for DLL project >>>>>>
############################################################################

$(gmu_Gp_LINK_OUTPUT): _p_WINDLL_MODULE_DEF_FromCurDir = $(_WDFL_p_FinalDefForDll)
# make _p_WINDLL_MODULE_DEF_FromCurDir(required by compiler_config.mki) target-specific variable

$(gmu_Gp_LINK_OUTPUT): $(_WDFL_p_FinalDefForDll)

$(_WDFL_p_FinalDefForDll): \
		$(if $(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT),$(_gmu_ud_SRC_ROOT)/$(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT))\
		$(gmu_Gp_list_SUBPRJ_TO_LINK)
	@$(call _MkdirIfNotExist,$(@D))
	@$(if $(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT),cp $(_gmu_ud_SRC_ROOT)/$(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT) $@,echo "EXPORTS" > $@)
	@for OneFile in $(patsubst %,"%/$(_WDFL_p_LibExportsDef_fpo)",$(gmuf_GetAllSubprjNameForLink)); do \
		OneAbsPath=$${gmu_ud_OUTPUT_ROOT}/$$OneFile; \
		if [ -f "$$OneAbsPath" ]; then cat $$OneAbsPath >> $@; fi; \
	done
# Special Note: In the above rule, don't substitue 
#	$(gmu_ud_SRC_ROOT)/$(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT)
# with
#	$(_p_WINDLL_MODULE_DEF_FromCurDir) ,
# because _p_WINDLL_MODULE_DEF_FromCurDir has been overridden to be $(_WDFL_p_FinalDefForDll),
# when this rule is executed.
# ps: _p_WINDLL_MODULE_DEF_FromCurDir is a variable recognized by msvc/compiler_config.mki

gmu_up_list_EXTRA_OBJ_TO_LINK += \
	$(foreach v,$(gmuf_GetAllSubprjNameForLink),\
		$(if $(call gmuf_IsFileExist_sh,$(call _WDFL_GetPrjStubObj,$v)),$(call _WDFL_GetPrjStubObj,$v))\
	)
	#[2011-02-27]Q: 都已经 postcore了，再往gmu_up_list_EXTRA_OBJ_TO_LINK 加东西还有用？？

ifeq ($(gmi_WDFL_DO_AUTO_EXPORT),1)
  
  _WDFL_export_stub_gen_cmd = export-stub-gen.py --update=$@ $(wildcard $^)
#  _WDFL_compile_stub_cmd = $(gmu_u_CC_CMD)

  _WDFL_p_list_AllSubprjExportObj = $(if $(_Gp_list_AutoPjnmAllChidren),\
	$(foreach P,$(_Gp_list_AutoPjnmAllChidren),$(call gmuf_GetPrjTmpDir,$P)/$(_pluginId_windll_from_lib)/$(_WDFL_f_ExportFuncList))\
	) # _Gp_list_AutoPjnmAllChidren is null means subprj have not been built.

  # Reason for rule $(_WDFL_p_list_AllSubprjExportObj): Some subprj may not export any functions, 
  # so they don't have _AutoExportObjList.txt, so we tell user this fact.
  $(_WDFL_p_list_AllSubprjExportObj):
	@$(call _DoVerbose1,echo "$(_pluginId_windll_from_lib): Info: Sub-project $(patsubst $(gmu_ud_OUTPUT_ROOT)/%/_gmu_tmp/$(_pluginId_windll_from_lib)/$(_WDFL_f_ExportFuncList),'%',$@) does not auto-export.")

  $(_WDFL_p_auto_export_stub_c): $(_WDFL_p_list_AllSubprjExportObj)
	@$(call _MkdirIfNotExist,$(@D))
	@$(call gmuf_ScriptCmd,$(_WDFL_export_stub_gen_cmd))
  ifneq (,$(gmi_WDFL_COPY_AUTOSTUB_TO_DLLSRCROOT))
	$(if $(_IsNotVerbose),@)cp $@ $(_gmu_ud_SRC_ROOT)
  endif
  
  $(_WDFL_p_auto_export_stub_obj): $(_WDFL_p_auto_export_stub_c)
	@echo "[[@=$@]"
	@echo "[[<=$<]"
  ifneq (,$(gmu_DO_SHOW_VERBOSE))
	@echo "$(_pluginId_windll_from_lib): Compiling $(_WDFL_f_auto_export_stub_c) ..."
  endif
  ifneq (,$(gmu_DO_SHOW_COMPILE_CMD))
	$(gmu_u_CC_CMD)
  else
	@$(gmu_u_CC_CMD)
  endif

  
endif # ifeq ($(gmi_WDFL_DO_AUTO_EXPORT),1)

############################################################################
### Code for DLL project <<<<<<
############################################################################
else
############################################################################
### Code for LIB project >>>>>>
############################################################################

ifneq (,$(gmi_WDFL_up_EXPORT_STUB_FROM_ROOT))

  $(gmu_Gp_LINK_OUTPUT_ckt): $(_WDFL_p_LibStubObj)

  $(_WDFL_p_LibStubObj): $(call gmuf_CnCXX_ListToObjList,$(gmi_WDFL_up_EXPORT_STUB_FROM_ROOT))
  ifeq (,$(_IsVerboseLevel1))
	@cp $< $@
  else
	cp $< $@
  endif

endif

#	[2007-01-16] NOTE: Even if _WDFL_p_LibExportDefs_fcd is null, $(_WDFL_p_Abs_ExportDefsForDll)
# should be created anyway, since this LIB project's sub-projects may present some 
# export definition.

$(_WDFL_p_Abs_ExportDefsForDll): $(_WDFL_p_LibExportDefs_fcd) $(gmu_Gp_list_SUBPRJ_TO_LINK)
	@$(call _MkdirIfNotExist,$(@D))
	@$(if $(_WDFL_p_LibExportDefs_fcd),cp $(_WDFL_p_LibExportDefs_fcd) $@,echo -n "" > $@)
ifneq (,$(gmu_IS_SUBPRJ_AUTO_LINK_MERGE))
	@for OneFile in "$(patsubst %,%/$(_WDFL_p_LibExportsDef_fpo),$(gmuf_GetAllSubprjNameForLink))"; do \
		OneAbsPath=$${gmu_ud_OUTPUT_ROOT}/$$OneFile; \
		if [ -f "$$OneAbsPath" ]; then cat $$OneAbsPath >> $@; fi; \
	done
endif


$(gmu_Gp_LINK_OUTPUT): $(_WDFL_p_Abs_ExportDefsForDll)
# $(_WDFL_p_LibExportDefs_fcd)'s change should make the LIB project to re-link.
# since $(_WDFL_p_Abs_ExportDefsForDll) should be re-created when 
# $(_WDFL_p_LibExportDefs_fcd), changes, we should should depend on 
# $(_WDFL_p_Abs_ExportDefsForDll) here.


ifeq ($(gmi_WDFL_DO_AUTO_EXPORT),1)
  
  _WDFL_export_collect_cmd = export-collect.py --prjname=$(gmu_PRJ_NAME) --update=$@ $^
  
  _wdfl_c_filter_pattern = $(addprefix %.,$(gmu_u_list_C_EXTN) $(gmu_u_list_CXX_EXTN))
  
  $(_WDFL_p_ExportFuncList): $(patsubst %,$(_gmu_ud_SRC_ROOT)/%,$(filter $(_wdfl_c_filter_pattern),$(gmu_up_list_SRC_FROM_ROOT)))
	@$(call _MkdirIfNotExist,$(@D))
	@echo "$(_pluginId_windll_from_lib): Collect auto export file list into $(notdir $@) ..."
	$(call _DoVerbose1,@echo "$(_WDFL_export_collect_cmd)")
	@$(call gmuf_ScriptCmd,$(_WDFL_export_collect_cmd))
  
endif # ifeq ($(gmi_WDFL_DO_AUTO_EXPORT),1)

############################################################################
### Code for LIB project <<<<<<
############################################################################
endif
