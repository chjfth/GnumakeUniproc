ifndef __PLUGIN_MSVC_PCH_LOADED
__PLUGIN_MSVC_PCH_LOADED = 1

_pluginId_use_pch_msvc := $(gmpv_ThisPluginId)
	# Plugin ID abbreviation: PCHVC
gmp_up_list_PLUGIN_POSTCORE_TO_LOAD += $(call gmpf_GetPluginPostcorePath_std,$(_pluginId_use_pch_msvc),postcore)



# User input vars:
#	gmi_PCHVC_up_HEADER_FOR_PCH_FROM_ROOT = (must) 
		# the header file used for precompiling (passed as /Yc 's argument)
		# Of course, if [this header file] or [files included by this file] changes, 
		# the .pch file will be regenerated before compiling any source that
		# includes this header file.
		# Conventionally, this file is named StdAfx.h .

#	gmi_PCHVC_up_HEADER_FOR_PCH_IN_YOUR_SRC = (optional) # the header name as appeared in 
		# the `#include "..."' statements in your source file, if you do not
		# define this, it'll default to $(notdir $(gmi_PCHVC_up_HEADER_FOR_PCH_FROM_ROOT))

#	gmi_PCHVC_u_PCH_PHANTOM_SRC_EXTN = (optional) # set it to `cpp' or 'c'
		# If not defined, the default rule is applied: if there is any .cpp
		# in your source, `cpp' is used, otherwise, `c' is used.

#	gmi_PCHVC_up_list_SRC_DEPPCH_FROM_ROOT = (optional)
#	gmi_PCHVC_up_list_SRC_DONT_DEPPCH_FROM_ROOT = (optional)
	#	These two vars control which source files should use pch and which should not.
	#
	# First, gmi_PCHVC_up_list_SRC_DEPPCH_FROM_ROOT(abbr. srcDepPch) tells which source files
	# should use pch. If null, it is as if all $(gmu_up_list_SRC_FROM_ROOT) is listed in.
	#
	# Second, gmi_PCHVC_up_list_SRC_DONT_DEPPCH_FROM_ROOT(abbr. srcDontDep) is used to exclude
	# some source files listed in srcDepPch from using pch. If some file in srcDontDep
	# is not listed in srcDepPch, that file is just ignored, no error asserted.
	#
	#	In most cases when pch is prefered, source files requiring pch is the majority, 
	# then you'd like to take this strategy: Let srcDepPch be null, and list those minor
	# files that don't use precompiled header into srcDontDep.

# User's NOTE:
#	If you want to add your own compiler flags for a project and that flags affect
# code generation, you must have it appear in gmp_CFLAGS_CODE_GEN_ALL
#	gmp_CFLAGS_CODE_GEN_ALL += $(gmp_CFLAGS_CODE_GEN) $(gmp_CXXFLAGS_CODE_GEN) $(gmp_CFLAGS_MACRO_DEFS) $(gmp_CFLAGS_INCLUDES)
# -- because this plugin use $(gmp_CFLAGS_CODE_GEN_ALL) as compiler flags when precompiling. 
# You know, you must have precompiling and real compiling use the same set of code generation flags.

# Implementor's note:
#	[2006-12-02] For MSVC6, you should know the real meaning of the `filename' 
# following /Yc and /Yu, that filename is actually used as a string matching of the 
# #include "..." statement in c/cpp source, that is, if a verbatim matching is
# found, the end precompilation is concluded, if no verbatim matching is found,
# cl asserts error C2857 (for /Yc) or C1010 (for /Yu).
# The word "verbatim" means, for example: 
	# If you feed /Yc"../StdAfx.h" to cl and the source to "compile" 
	# has the statement `#include G:/test/StdAfx.h', then the compiler 
	# will however assert error C2857 event if ../StdAfx.h and G:/test/StdAfx.h 
	# actually refer to the same file.


ifeq (,$(strip $(gmi_PCHVC_up_HEADER_FOR_PCH_IN_YOUR_SRC)))
  gmi_PCHVC_up_HEADER_FOR_PCH_IN_YOUR_SRC = $(notdir $(gmi_PCHVC_up_HEADER_FOR_PCH_FROM_ROOT))
endif

ifeq (,$(strip $(gmi_PCHVC_u_PCH_PHANTOM_SRC_EXTN)))
  gmi_PCHVC_u_PCH_PHANTOM_SRC_EXTN = $(call _GetExtName,$(firstword \
    $(foreach _extn,$(gmu_u_list_CXX_EXTN) $(gmu_u_list_C_EXTN),$(filter %.$(_extn),$(gmu_up_list_SRC_FROM_ROOT))) \
    ))
endif

ifeq (,$(_dirPchTmpOutputDir_))
  _dirPchTmpOutputDir_ = _gmu_tmp/$(_pluginId_use_pch_msvc)/
endif

_p_PCH_GENERATED = $(patsubst %,$(gmu_Gd_Deco_PrjOutput)/$(_dirPchTmpOutputDir_)%.pch,$(gmi_PCHVC_up_HEADER_FOR_PCH_FROM_ROOT))
	#[2006-12-03] XXX.h.pch, XXX.h.pch.d, XXX(phantom).h.cpp, XXX(phantom).h.pch.obj will all
	#be placed into the same dir as $(_p_PCH_GENERATED) .
	#
	# _p_PCH_GENERATED is XXX.h.pch

_p_HDEPEND_FOR_PCH = $(_p_PCH_GENERATED:.pch=.pch.d)
	#
	# _p_HDEPEND_FOR_PCH is XXX.h.pch.d

_p_PCH_GENERATED_obj = $(_p_PCH_GENERATED).$(gmu_extn_OBJ)
	# This file will be generated by 'cl /Yc' command, and will be passed as a link-component for link.exe
	#
gmu_up_list_EXTRA_OBJ_TO_LINK += $(_p_PCH_GENERATED_obj)

_p_PhantomSrc = $(call _ChangeFilenameExt,$(_p_PCH_GENERATED),$(gmi_PCHVC_u_PCH_PHANTOM_SRC_EXTN))
	#
	# _p_PhantomSrc is XXX(phantom).h.<c/cpp-extn>
	# The output obj file for the phantom source c/cpp is XXX(phantom).h.pch.obj

_p_USER_HEADER_for_PCH = $(gmu_ud_SRC_ROOT)/$(gmi_PCHVC_up_HEADER_FOR_PCH_FROM_ROOT)
	# Note: This dir may be relative to current dir(if $(gmu_ud_SRC_ROOT) is a relative dir).
_p_AbsPath_USER_HEADER_for_PCH = $(call _GetAbsPathRelaToCurdir,$(_p_USER_HEADER_for_PCH))


endif #ifndef __PLUGIN_MSVC_PCH_LOADED
