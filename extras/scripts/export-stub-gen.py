#!/usr/bin/env python

"""
Used by GMU DLL project.
"""

import sys
import getopt
import re
import os

version = "1.0"

opts = {}

def ProcessOneFile(fname):
	"""
	fname: Name of a text file containing list of C function names.
		Each line in fname is a true C function name. 
	
	Return tuple (prjname, arfuncs). arfuncs is an array of function names from fname, with \n stripped.
	"""
	fhinput = open(fname, 'r')
	funcs = fhinput.readlines()

	if len(funcs)==0:
		return '<unknown>', []
	
	prjname = ''
	# Extract GMU prjname
	m = re.search(r'^([^:]+):', funcs[0])
	prjname = m.group(1) if m else '<unknown>'
	
	# Extract function names	
	for i in range(0, len(funcs)):
		m = re.search(r'^[^:]*:(.+)', funcs[i])
		if m: funcs[i] = m.group(1)  # Reject the prjname port if there is a ':' in it
		if funcs[i][-1]=='\n': funcs[i]=funcs[i][:-1]
		
	fhinput.close()
	return prjname,funcs
	

def main():
	global opts;
	global prjname
	
	optlist,arglist = getopt.getopt(sys.argv[1:], '', ['update=', 'version'])
	for opt in optlist:
		opts[opt[0]] = opt[1]

	if '--version' in opts:
		print 'export-stub-gen.py v%s'%(version)
		print 'Example:'
		print '  export-stub-gen.py --update=<upfile> 1.txt 2.txt ...'
		return 0;
	
	if(len(arglist)==0):
		print 'No input file!'
		return 1;
	
	if not '--update' in opts:
		print 'No --update==<upfile> assigned!'
		return 2;

#	print '>>>' + opts['--update']
	fnupdate = opts['--update']
	
	fhupdate = open(fnupdate, 'w')

	# First lines of output file:
	lines = [
"""
/*
This file is generated by PI_dll_from_lib plugin for GnumakeUniproc. Do not modify it manually.
*/
void _ExportFunctionList(void)
{
"""]

	for fname in arglist:
		prjname, funcs = ProcessOneFile(fname)
		
		if not funcs: 
			continue # export function list is empty, so go on with next file
		
		lines.append(
			'\t/* Auto-export functions from GMU project(gmu_PRJ_NAME): %s\n\t*/\n'%(prjname)
			)
		lines.append('\t{\n')
		
		for func in funcs: # write function declaration statements
			lines.append('\textern void %s(void);\n'%(func))
		
		for func in funcs: # write function invocation statements
			lines.append('\t%s();\n'%(func))
		
		lines.append('\t}\n')
		
	lines.append('}\n');	

	fhupdate.writelines(lines)
	fhupdate.close();
	
	return 0


if __name__ == '__main__':
    ret = main()
    exit(ret)
