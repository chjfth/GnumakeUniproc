<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html lang=en>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="STYLESHEET" type="text/css" href="chj.css">
<link rel="STYLESHEET" type="text/css" href="../chj.css">
<title>Pattern1 vars for linux</title>

</head>

<body>
<H1 align="center">Pattern1 vars for linux gcc</H1>

<p>Gmu-vars listed in this page affects compiling and linking behavior when building with GNU gcc. </p>
<h4>Common vars </h4>
<table width="100%"  border="1">
  <tr>
    <th scope="col">Var name </th>
    <th scope="col">Description</th>
  </tr>
  <tr>
    <td valign="top">gmp_GCC_PREFIX</td>
    <td><p>Tell the prefix of gcc executable. Default value is null.</p>
      <p>Example: If you want to run <code>arm-linux-gcc</code> instead of <code>gcc</code>, you set <code>gmp_GCC_PREFIX=arm-linux-</code> . At the same time, <code>arm-linux-g++</code>, <code>arm-linux-ar</code> etc will be used instead of their non-prefix counterpart. </p>
      <p>NOTE: If you set a value for <code>gmp_GCC_PREFIX</code>, you probably need to set <code>gmu_GCC_M_PREFIX</code> to the same value as well, so that when doing `<code>gcc -M</code>' , you use the same set of gcc(same system headers matters). Be careful, the two gmu vars have different name-prefix(gmp vs gmu).</p></td>
  </tr>
  <tr>
    <td valign="top">gmp_GCC_CFLAGS_PIC</td>
    <td><p>This controls use of gcc flag <code>-fpic</code> or <code>-fPIC</code> or none.</p>
    <p>If null, <code>-fpic</code> is always used. </p>
    <p>If you want to use neither <code>-fpic</code> or <code>-fPIC</code>, assign <tt>nopic</tt> as its value. </p>
    <p>Rationale: GnumakeUniproc's author thinks <code>-fpic</code> should be the default, so set it in <tt>gmp_CFLAGS_CODE_GEN_preset</tt>. However, GNU make (at least for 3.81 and prior) does not provide <tt>-=</tt> operator to filter off a token from a variable itself, so, this extra gmu-var is introduced. </p></td>
  </tr>
  <tr>
    <td valign="top">gmp_GCC_LINK_GXX</td>
    <td><p>If 1, always use <tt>g++</tt>(instead of <tt>gcc</tt>) when linking executable or shared object.</p>
    <p>Default to null. If null, using <tt>g++</tt> or <tt>gcc</tt> is determined by source file input of the current project. If some input file has C++ extension, <tt>g++</tt> is used, otherwise <tt>gcc</tt> is used.</p></td>
  </tr>
  <tr>
    <td valign="top">gmp_LINKER_NO_RECURSE_LIB_SEARCH</td>
    <td><p>This defaults to null, and when passing libraries to linker, <code>--start-group</code> and <code>--end-group</code> is used so that user can write libraries in any order. This should be the preferred linker behavior in most cases.</p>
    <p>If set to 1,  <code>--start-group</code> and <code>--end-group</code> will not be used and user have to care about the library passing order to ensure success.</p></td>
  </tr>
  <tr>
    <td valign="top"><p>gmp_GCC_M32</p>
    <p>gmp_GCC_M64</p></td>
    <td><p>If <code>gmp_GCC_M32=1</code> , <code>-m32</code> will pass passed to gcc compiler and linker, and has project suffix <code>-m32</code> .</p>
    <p>If <code>gmp_GCC_M64=1</code> , <code>-m64</code> will pass passed to gcc compiler and linker, and has project suffix <code>-m64</code> .</p>
    <p>Default: Neither is defined, so your build machine determines the default gcc variant to call.</p>
    <p>If both are defined, only <code>gmp_GCC_M32</code> is effective.</p>
    <p>Using these vars is useful when you want to build both 32-bit and 64-bit programs on the same Linux build machine, and their build output directory will be separated because project name decoration is done for you automatically.</p></td>
  </tr>
</table>
<h4>Compatibility vars </h4>
<p>In principles, if you're using latest gcc compiler, you don't have to set any of these vars. But if you're using older versions of gcc, the default pattern1 compiler option may contain some options that older gcc don't support, in this situation, you can look up the following table to see whether setting some gmp vars can make a work around. The benefit of setting these vars is you can hopefully avoid making changes to your makefiles </p>
<table width="100%"  border="1">
  <tr>
    <th scope="col">Var name </th>
    <th scope="col">Description</th>
  </tr>
  <tr>
    <td valign="top">gmp_GCC_OLDVER_NO_FVISIBILITY</td>
    <td><p>Since GMU v0.93, by default, <code>-fvisibility=hidden</code> is included in compile option, so that when linking shared objects(DLLs), symbols get hidden inside the .so files to reduce conflict with other .so . To make certain symbols external, decorate <code>__attribute__((visibility(&quot;default&quot;)))</code> to your functions or classes. </p>
        <p>If you're using older gcc(e.g. v3.2) that don't support <code>-fvisibility</code> , you can define this var to non-null so that <code>-fvisibility</code> is not used by default. </p></td>
  </tr>
</table>
<p>--</p>
</body>

</html>
