<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Windows 上 make.exe 和 sh.exe 的互关联问题</title>

<style type="text/css">
P { line-height: 120%; }
pre {
    border: #777777 1px solid;
    padding: 0.5em;
    margin-left: 0em;
    margin-right: 0em;
    background-color: #e6e6e6;
}

H1 {
	font-family: Verdana, Arial, sans-serif; 
}
H2 {
	color: #000066;
	font-family: Verdana, Arial, sans-serif; 
}
H3 {
	font-family: Verdana, Arial, sans-serif; 
	color: #6600dd;
	font-size: 120%
}
H4 {
	color: #660000;
	font-family: Verdana, Arial, sans-serif; 
}

code { color:#660033; }
tt { color:#003366; }

.hint {
	font-size: 90%;
    border: #777777 1px solid;
    padding: 0.5em;
    margin-left: 2em;
    margin-right: 2em;
}

.footnoteb {
    border: #777777 1px solid;
	color: #404040;
	font-size: 90%;
    padding: 0.5em;
    margin-left: 2em;
    margin-right: 2em;
}
.c-comment { color:#009900; }
.c-string { color:#660066; }

.later-comment-in {color: #666666}
.red { color: red; }
.boldblue {
	color: #0000FF;
	font-weight: bold;
}
.style-font-small {font-size: small}

</style>
</head>
<body>

<H1 align="center">Windows 上 make.exe 和 sh.exe 的互关联问题</H1>

<ol>
<li><a href="#080819">080819: 今天总算看清一些秘密</a></li>
</ol>

<H2><a name="080819"></a>[2008-08-19] 今天总算看清一些秘密</H2>
<p>今天做了一堆实验后，总算看清 make.exe 和 sh.exe 的一些秘密，一个困扰了两年的问题有了 workaround。现总结如下。</p>
<h3>实验 1</h3>
<p>做如下准备工作：</p>
<ul>
  <li>准备一台全新的 Windows 2000 机器。</li>
  <li>创建目录 d:\makebin，将 VC6 编译出的 make.exe (用 GNU 官方 v3.81 源码) 拷入其中。（GnumakeUniproc 中附带的就是这个 make.exe）</li>
  <li>打开一个 cmd box，设置 <code>PATH=D:\makebin;%PATH%</code> 。 </li>
  <li>建立一个空目录 d:\maketest ，cd 进入之。</li>
</ul>
<p>创建 d:\maketest\t1.mk 内容如下：</p>
<pre><span class="c-comment"># t1.mk</span>
tmp := $(shell winver)

all:
</pre>
<p>make 之，成功。成功的意思是 Windows 的 About 对话框弹出来了。</p>
<p>再换个 t2.mk，给 winver 传个参数看看（虽然 winver 并不理会那参数）：</p>
<pre><span class="c-comment"># t2.mk</span>
tmp := $(shell winver param)

all:
</pre>
<p>也成功。来 t3.mk 试试。</p>
<pre><span class="c-comment"># t3.mk</span>
tmp := $(shell winver <span class="c-string">&quot;param&quot;</span>)

all:
</pre>
<p>还是成功。这有什么奇怪吗？目前为止确实没有奇怪之处，但奇怪的东西马上就来了，进入实验 2。</p>
<h3>实验 2 </h3>
<p>现在，我们往 d:\makebin 中拷入 www.mame.net 提供的那个 <tt>sh.exe</tt> 。我们要在 <code>$(shell )</code> 函数中使用 Bourne shell 语法的话，sh.exe 可是少不了的。</p>
<p>现在分别再 make 上头那 3 个 makefile，看会怎样？你看到的结果是：</p>
<ul>
  <li>t1.mk 成功。</li>
  <li>t2.mk 成功。</li>
  <li>t3.mk 失败。winver.exe 没有被执行起来。cmd box 出现错误信息:</li>
  <pre>winver: not found
make: Nothing to be done for `all'.</pre>
</ul>
<p>第一个惊讶来了：为什么 sh.exe 处于 PATH 中、且 <code>$(shell )</code> 命令中有双引号时，原 cmd box 环境之 PATH 中的 EXE 就会找不到呢？</p>
<div class="footnoteb">事实上，不仅仅是双引号会触发此错误，引入一些 Bourne shell 特有语法也会。比如，用分号来执行两个命令：<code>$(shell winver ; winver )</code> 。 </div>
<h3>实验 3 （显露真正的问题） </h3>
<p>在实验 2 的基础上，对 t3.mk 作点修改，成为</p>
<pre><span class="c-comment"># t3sp.mk</span>
tmp := $(shell echo <span class="c-string">"$${PATH}"</span> 1>&2 ; winver <span class="c-string">"param"</span>)

all:
</pre>
<p>我们从中偷看 <code>$(shell )</code> 函数启动一个 shell 时，此 shell 眼中的 PATH 是什么样的。结果是：</p>
<pre><span class="red">/bin;/usr/bin</span>
winver: not found
make: Nothing to be done for `all'.
</pre>
<p>PATH 内容居然是莫名其妙的 <tt class="red">/bin;/usr/bin</tt> ，这是第二个惊讶。 </p>
<p>若对 t2.mk 也加上 <code>echo "$${PATH}" 1>&2 ;</code> 窥视一下 PATH 会怎样，这会落得和 t3sp.mk 一样的结果，因为 <code>$(shell ...)</code> 中出现了引号。 </p>
<div class="footnoteb">Linux 下并无此问题，即本例运行输出的 PATH 值和原 Bash 环境中的 PATH 一样。</div>
<h3>如何解决实验 3 的问题 </h3>
<p>此问题在 GnumakeUniproc 开发的头几个月就已发现，当时的解决方法是借助一个额外的环境变量 <code>gmu_DIR_GMU_PRG</code> 来指示 sh.exe 所在的目录，gmu_DIR_GMU_PRG 的值要事先手动设置好（Windows 上由 GnumakeUniproc installer 来帮用户设好）。gmu_DIR_GMU_PRG 的起源见 v201 的 GnumakeUniproc.mki（当时的名字叫 <code>gmu_DIR_FMK_PRG</code>）。当要用 <code>$(shell )</code> 启动一个 EXE 时，得如下写</p>
<pre>    tmp := $(shell (if [ -n <span class="c-string">"$$gmu_DIR_GMU_PRG"</span> ];then PATH=$$gmu_DIR_GMU_PRG;fi; some-exe-to-invoke))
</pre>
<p>除了写起来麻烦，如此方法还有个显著缺点，你想执行原先 PATH 中能找到的程序时就不妙了。当时认为此做法还是能接受的，――因为 GnumakeUniproc 是 Linux &amp; Windows 通用的，没理由去执行 Linux or Windows specific 的程序。但是，随着 <code>gmu_u_SHOW_PROGRESS_CMD</code> 这个东西的引入，那个局限性的缺点就暴露出来了。由于 <code>gmu_u_SHOW_PROGRESS_CMD</code> 的值是用 GMU 用户自己定义的，在 Windows 和 Linux 上几乎肯定是不同的。这样 Windows 上的麻烦来了，<code>gmu_u_SHOW_PROGRESS_CMD</code> 中要想直接调 <tt>cmd /C set title xxx</tt> 都不顺。前几周还不得不用一种土办法，即调 cmd 前临时设置 <tt>PATH=$(SystemRoot))/system32</tt> 。确实烦。 </p>
<p>中途还想到一招，不过也不够好，暂时没用上。在 umake.bat 中将 PATH 先保存为环境变量 <code>GMU_PATH_PRE_SAVE</code> ，此后 sh.exe 中要用 PATH 时改为用 <code>GMU_PATH_PRE_SAVE</code> 。</p>
<h3>很幸运地发现一个变通方法（workaround） </h3>
<p>该 workaround 演示如下：还是在实验 2 的基础上，对 t3.mk 作点修改，</p>
<pre><span class="c-comment"># t3wa.mk</span>
tmp := $(shell echo &quot;&quot;)
tmp := $(shell winver "param")

all:
</pre>
<p>Wow! 这回 winver 成功了。第一句的 <code>tmp := $(shell echo &quot;&quot;)</code> 做了啥事呢？老实说，暂时没弄懂。Why? 看这么弄看看：</p>
<blockquote>
  <p>第一句做一丁点修改，变成</p>
  <pre>tmp := $(shell echo)
或
tmp := $(shell echo 123)</pre>
  <p>结果又出人意料：winver 被执行了，不过之前 cmd box 出现：</p>
  <pre>process_begin: CreateProcess(NULL, echo 123, ...) failed.
make: `all' is up to date.</pre>
</blockquote>
<p>现在我们再来偷看一下 t3wa.mk 的第二次 <code>$(shell )</code> 时 PATH 值为何？用 t3wa2.mk : </p>
<pre><span class="c-comment"># t3wa2.mk</span>

tmp := $(shell echo &quot;&quot;)
tmp := $(shell echo <span class="c-string">"$${PATH}"</span> 1>&2 ; winver <span class="c-string">"param"</span>)

all:</pre>
<p>执行之，winver 还是成功执行。cmd box 输出：</p>
<pre><b>D:/makebin;C:/WINNT/system32;C:/WINNT</b>
make: `all' is up to date.
</pre>
<p>好极了，这就是我们需要的。要点：</p>
<ul>
  <li>路径分量分隔符变为 / 而非 \ 。正斜杠对 Bourne shell 很友好，而反斜杠在 Bourne shell 中是转义符，在 Bourne shell 命令中得用 \\ 才能维持本意。将 \ 替换为 \\ 的活一般来说得在 makefile 中专门写 code 进行，烦着呢。而且，Windows 自身也能识别 PATH 中的正斜杠。</li>
  <li>路径分隔符保持为 Windows 特色的分号，而非 Unix 的冒号。好处是 sh.exe 再启动新 Windows 子进程的话 子进程看到的仍是可识别的 PATH 。 </li>
</ul>
<p>一个问题，这个 echo 是 cmd 的内部命令还是 sh.exe 的 内部命令？答案是 sh.exe 的，你可以用 unix echo 的一些特殊开关来验证之（比如 -n）。虽然此例证实了 sh.exe 提供了一个内部 echo 实现，但实际使用 make 时一个额外的 echo.exe 还是不可少的（<a href="问题及修正.htm#070109">见此</a>）。</p>
<p>完毕。</p>
<h4>一个分支实验，无 sh.exe 的情况 </h4>
<p>若在实验 1 的条件下（即无 sh.exe 的情况）make <tt>t3wa.mk</tt> ，则 <code>$(shell )</code> 会调用 cmd 的内部命令 echo ，将第一句替换为 <code>tmp := $(shell echo 1&gt;&amp;2)</code> 可验证之（你在 cmd box可看到 <tt>关闭 ECHO。</tt> 的字样）。</p>
<p>这个实验和 GnumakeUniproc 并无关系，只是为了将 make.exe 的 <code>$(shell )</code> 行为描述得更完备。</p>
<p>==</p>
</body>

</html>
