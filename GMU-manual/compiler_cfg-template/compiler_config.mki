#### Compiler config template file for use with GnumakeUniproc v1.0
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

###############################################################################
#	Compiler and usage description here
###############################################################################
# This file supports ... compiler to be used with GnumakeUniproc. 
# .......


_THIS_COMPILER_ID := <compiler-id>
	# Please set this to your compiler-id, e.g., msvc .

ifneq ($(gmp_COMPILER_ID),$(_THIS_COMPILER_ID))
  $(error !You have set a gmp_COMPILER_ID other than "$(_THIS_COMPILER_ID)")
endif
gmp_G_COMPILER_ID_VER = $(gmp_COMPILER_ID)$(gmp_COMPILER_VER_$(_THIS_COMPILER_ID))


### sample:
#_sdtCompilerVer = $(filter sdt%,$(gmp_COMPILER_VER_armcpp))
#_IsUsingSDT = $(if $(_sdtCompilerVer),1,)

### sample:
#_msvc_vc60ver := $(filter vc60%,$(gmp_COMPILER_VER_msvc))
#_msvc_IsUsing_vc60 := $(if $(_msvc_vc60ver),1,)

### sample:
#_xxCompilerVers := $(strip $(_sdtCompilerVer) $(_msvc_vc60ver))

# Here, check whether gmp_COMPILER_VER_$(_THIS_COMPILER_ID) results in a non-empty but unrecognized compiler-ver.
ifneq (,$(gmp_COMPILER_VER_$(_THIS_COMPILER_ID)))
  ifeq (,$(<_xx>CompilerVers))
    $(warning !GMP!Warning: Your gmp_COMPILER_VER_$(_THIS_COMPILER_ID) has value "$(gmp_COMPILER_VER_$(_THIS_COMPILER_ID))", which contains no recognized version for <certain> compiler)
  endif
endif

ifeq (,$(strip $(_<xx>CompilerVers)))
  # set the default:
  _<xx>CompilerVerUse = #armrv
  #_IsUsingARMRV = 1
else
  ifneq (1,$(call _IsAllWordsSame,$(_<xx>CompilerVers)))
    $(error !GMP!Error: Multiple <certain> compiler versions are defined: gmp_COMPILER_VER_$(_THIS_COMPILER_ID)=$(gmp_COMPILER_VER_$(_THIS_COMPILER_ID)), _<xx>CompilerVers=$(_<xx>CompilerVers))
  endif
  _armCompilerVerUse = $(firstword $(_armCompilerVers))

  #[2008-08-14] gmp_G_CompilerVerToDeco must be defined for a compiler-config-mki if input
  #gmp_COMPILER_VER_armcpp matches one of the predefined compiler-ver strings.
  gmp_G_CompilerVerToDeco := _$(_<xx>CompilerVerUse)
  gmp_G_CompilerVerValid  :=  $(_<xx>CompilerVerUse)
endif



# Configure extension names for object/lib/exe files.
gmu_extn_OBJ = obj
gmp_extn_LIB = lib
gmp_extn_DLL = dll
gmp_extn_EXE = exe

# Configure command names for compiler, linker, archiver.
gmu_exe_CC = cl
gmu_exe_CXX = cl
gmu_exe_ASM = masm
gmu_exe_LINK = link
gmu_exe_LIB = lib

# Configure name construction rule for Lib/Exe/Dll
gmpf_MakeLibName = $(patsubst %,%.$(gmp_extn_LIB),$1)
gmpf_MakeExeName = $(patsubst %,%.$(gmp_extn_EXE),$1)
gmpf_MakeDllName = $1.$(gmp_extn_DLL) # cannot generate this type of image yet


# Define function gmpf_MakeUpSysLibsToLink.
# This tells how a
gmpf_MakeUpSysLibsToLink = <function>
# Examples:
#	gmpf_MakeUpSysLibsToLink = $(addsuffix .lib,$1) # For Windows
#	gmpf_MakeUpSysLibsToLink = $(addprefix -l,$1)   # For linux

gmu_u_GCC_M_OPTIONS += 


# Check whether the env-vars for running command line compiler are OK.
#	[2007-12-13] This ARMINC is only meaningful to ARM SDT 2.5, so don't demand it.
# but setting it is suggested, because this will tell ``gcc -M' which dirs contains
# ARM system headers so that we need not refer to them in .d files.
### sample:
#ifeq '' '$(ARMINC)'
#  $(warning !Env-var `ARMINC' not defined! I don't know which directories contain ARM's system headers.\
# Please set it to, e.g: ARMINC=E:\ARM250\Include (Separate multiple dirs with semicolons.) And DO NOT use spaces in dirs)
#endif

gmu_ud_list_SYS_HEADER +=
#gmu_ud_list_SYS_HEADER += $(subst ;, ,$(subst \,/,$(ARMINC)))
	# This ARMINC variable is set up by ARM SDT/ADS installer to indicate the system header dir.


gmp_CFLAGS_NON_CODE_GEN +=

c_flags_Asm_Common = 

c_flags_Link_Common = 

################################################################################
# For each compiler or link flag category below, you must choose one that suits 
# your need.
#	`cfc' means compiler-flag-category
#	`lfc' means linker-flag-category
#################################################################################

# Category(dor): Debug-Build or Release-Build
cfc_for_Debug_codegen = -g -O0
cfc_for_Debug_defs = -D_DEBUG 
cfc_for_Release_codegen = -O2
cfc_for_Release_defs = #-DNDEBUG
	# !!!!!![2008-10-16] Special: According to long lasting conventions of building uBase apps,
	# we don't define -DNDEBUG so that assert always takes effect.
	# (ARM SDT 2.5 ASSERT.H checks NDEBUG macro to determine whether assert() takes effect.)
	# I'll revert this default -DNDEBUG after I find an elegant way for GNU make to filter-out
	# -DNDEBUG at a later stage.

# Category(chr): MBCS or Unicode
cfc_chr_Mbcs_defs = -D_MBCS
cfc_chr_Unicode_defs = -DUNICODE -D_UNICODE


# Category(ldbg): Is link with /DEBUG option
#lfc_ !!! by yourself


####################################

include $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirDefaultCompilerCfg)/bc_common.mki


################################################################################

#gmp_CFLAGS_MACRO_DEFS_preset += $(patsubst %,/D%=__declspec\(dllexport\),$(gmp_u_list_DLL_EXPORT_SYM))
#gmp_CFLAGS_MACRO_DEFS_preset += $(patsubst %,/D%=__declspec\(dllimport\),$(gmp_u_list_DLL_IMPORT_SYM))

gmp_ASMFLAGS += $(c_flags_Asm_Common)

#                                  ........ gmp_bc_UNICODE ........
ifdef gmp_bc_UNICODE
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Unicode_defs)
else # MBCS 
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Mbcs_defs)
endif

#^^^^^^^^ gmp_bc_UNICODE ^^^^^^^########........ gmp_bc_DEBUG .........

ifdef gmp_bc_DEBUG
  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Debug_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Debug_defs) 
else # for so-called release-build
  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Release_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Release_defs)
endif

#^^^^^^^ gmp_bc_DEBUG ^^^^^^^^^########....... gmp_bc_IMAGE_TYPE ........

ifdef gmp_bc_DEBUG
  gmp_LINKFLAGS_preset += -debug
else
  gmp_LINKFLAGS_preset += #-nodebug
  	#	[2006-04-04] I dare not use -nodebug now, because the ELF image 
  	# generated with -nodebug by armlink(SDT2.5 confirmed) cannot be
  	# translated into -bin format. Error message by fromelf is:
	#
  	#	Error: Q0139E: ELF Image has insufficient information to effect this translation.
  	#
endif


_p_objliblist = $(gmu_Gd_Deco_PrjOutput)/objlist.lst
_cmd_write_objliblist = echo -e "$(subst \,\\,$(subst $(_GmuSpace),\n,$1))" > $2

# >>>>>>>>>>>>>> predefine some gmp_XXX commands 

####### DLL ####### (actually unimplemented yet)

  gmp_LINKFLAGS_DLL = 
  define _gmp_LINK_CMD_DLL
	@$(bcfShowLibrariesToLink)
	$(gmu_exe_LINK) $(gmp_LINKFLAGS_DLL) $(_gmp_LINKFLAGS_final) -o "$(gmu_Gp_LINK_OUTPUT)" $(gmp_ALL_TO_LINK)
  endef


####### EXE #######
define _gmp_LINK_CMD_EXE
	@$(bcfShowLibrariesToLink)
	$(gmu_exe_LINK) -o "$@" $(_gmp_LINKFLAGS_final) $(gmp_ALL_TO_LINK)
endef


# <<<<<<<<<<<<<< predefine some gmp_XXX commands 

ifeq '$(gmp_bc_IMAGE_TYPE)' 'LIB'

  gmu_I_AM_A_LINK_COMPONENT = 1 #[2006-11-02]
  gmu_IS_SUBPRJ_AUTO_LINK_MERGE = 1 #[2006-12-11]

  gmp_Gp_list_LIB_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmp_CFLAGS_MACRO_DEFS_preset += -D_LIB

  define gmu_u_LINK_CMD
	@echo "$(gmp_ALL_TO_LINK_FOR_LIB)" > $(gmu_Gd_PRJ_GMUTMP)/_ObjsForThisLib.gmp.lst
	@$(call _cmd_write_objliblist,$(subst /,\\,$(gmp_ALL_TO_LINK)),$(_p_objliblist))
	$(gmu_exe_LIB) $(gmp_armcpp_LIB_CREATE_OPTION) "$@" $(-opt-via) $(_p_objliblist)
  endef

else

	#	Note: armlink does not provide such options as -L for searching user libraries,
	# so user have to prepend a directory to every user library they want to link with.

ifeq '$(gmp_bc_IMAGE_TYPE)' 'DLL' # not ready for use yet!

  gmu_I_AM_A_LINK_COMPONENT = 1

  gmp_Gp_list_DLL_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_DLL)

else
ifeq '$(gmp_bc_IMAGE_TYPE)' 'EXE'

  gmp_Gp_list_EXE_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_EXE)

endif # EXE_GUI
endif # DLL
endif # LIB

#^^^^^^^^ gmp_bc_IMAGE_TYPE ^^^^^^^^

# ................................................

gmp_FLAGS_INCLUDES += $(addprefix -I ,$(gmu_ud_list_PRJ_HEADER)) # append include-directories 

gmu_u_CC_CMD =  $(gmu_exe_CC)  -c $(_gmp_CFLAGS_final) $(gmp_FLAGS_INCLUDES) -o "$@" $<
gmu_u_CXX_CMD = $(gmu_exe_CXX) -c $(_gmp_CFLAGS_final) $(gmp_FLAGS_INCLUDES) -o "$@" $<
gmu_u_ASM_CMD = $(gmu_exe_ASM) $(gmp_ASMFLAGS) -o "$@" $<

# ..... syslib categories, user should append some into gmp_bc_SYSLIBS (gmp_bc_SYSLIBS += gmp_bc_syslib_XXX).

#gmp_bc_SYSLIBS = $(call gmpf_MakeUpSysLibsToLink,kernel32 uuid)
#
#gmp_bc_syslib_GUI = user32 gdi32 comdlg32
#gmp_bc_syslib_WIN_SYS = winspool shell32 advapi32 ole32 oleaut32
#gmp_bc_syslib_DATABASE = odbc32 odbccp32
#gmp_bc_syslib_NETWORK = ws2_32
#

