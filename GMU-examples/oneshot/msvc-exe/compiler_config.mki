
gmu_exe_CC = my.cl
gmu_exe_CXX = my.cl
	# [Optional] the above two are optional, just compiler name hint

gmu_extn_OBJ = obj
	# [Optional] Set object file extension name. 
	# For Visual C++, object name is conventionally xxx.obj . If not set, it will be xxx.o .

INCLUDE += $(Include) $(include) # This is required because make's var is case sensitive.
_gmu_isystem_DIRS_WRAP_QUOTES = $(call gmpf_gccM_DesectPathList,$(INCLUDE),;)
	# [Optional] This is special for MSVC. It will generate 
	#	-isystem "C:/Program Files (x86)/Microsoft Visual Studio/VC/include" -isystem "..."
	# and these will be passed to ``gcc -M`` telling those are VC++ system header directories.


gmp_CFLAGS_INCLUDES += $(addprefix -I ,$(gmu_ud_list_PRJ_HEADER))
	# [Recommended] Using $(gmu_ud_list_PRJ_HEADER) enables GMU's auto-hdepend facility.

# [Required] gmu_u_CC_CMD, .c compile command
gmu_u_CC_CMD = cl /nologo /c /Zi $(gmp_CFLAGS_INCLUDES) /Fo"$(patsubst $(CURDIR)/%,./%,$@)" $<
	# Memo: You can simply use
	#	$@
	# instead of
	#	$(patsubst $(CURDIR)/%,./%,$@)
	# except that you will see a very long absolute xxx.obj path on command line.

# [Required] gmu_u_CXX_CMD, .cpp compile command
gmu_u_CXX_CMD = $(gmu_u_CC_CMD)

gmp_ALL_TO_LINK = $(patsubst $(CURDIR)/%,./%,\
  $(gmu_up_list_EXTRA_OBJ_TO_LINK) $(gmu_Gp_list_REQOBJS) \
  $(gmu_Gp_list_SUBPRJ_TO_LINK) $(gmp_bc_EXTRALIBS) $(gmp_bc_SYSLIBS))
  # This is an a bit simplified version of gmp_ALL_TO_LINK, see bc_common.mki for a more complete version.


# [Required] gmu_u_LINK_CMD, linking or lib packing command
gmu_u_LINK_CMD = link /nologo /debug /out:"$@" $(gmp_ALL_TO_LINK)

