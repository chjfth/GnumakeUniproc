head	1.5;
access;
symbols
	trelease:1.1.1.1 tvendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.12.10.02.33.28;	author chj;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
permissions	666;
commitid	1254493f2a786b15;
filename	u_srccfg_post.mki;

1.4
date	2008.06.28.02.25.44;	author chj;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
permissions	666;
commitid	15984865a128093c;
filename	u_srccfg_post.mki;

1.3
date	2008.04.27.05.30.23;	author chj;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
commitid	371748140f6f4567;

1.2
date	2007.10.03.14.11.36;	author chj;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
commitid	7f1c4703a3184567;

1.1
date	2007.10.03.12.50.54;	author chj;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;
kopt	kv;
commitid	74224703902e4567;

1.1.1.1
date	2007.10.03.12.50.54;	author chj;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
commitid	74224703902e4567;


desc
@@


1.5
log
@Introduce new gmu-var gmp_bc_EXTRALIBS to deprecate gmp_bc_EXTRALIBS1 & gmp_bc_EXTRALIBS2.
@
text
@#### template file for use with pattern1.mks, [GnumakeUniproc v1.0]
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

#---------------------------------------------------------------------------
# This file is to be included by $(gmu_DIR_GNUMAKEUNIPROC)/pattern1.mks 
# after the "compiler-config" files have been included. Commonly, you write
# your source files and compiler/linker options in this file.
#---------------------------------------------------------------------------

############################################################################
# GMU-var: gmu_uf_LINK_OUTPUT
#	Define the link ouput filename for this project.
# Decoration may be applied to this name which results in $(gmu_Gf_Final_LinkOutput).
# Using function gmpf_MakeExeName to construct output name makes the name more portable.
############################################################################
gmu_uf_LINK_OUTPUT = $(call gmpf_MakeDllNameForLink,ZLIB1)

############################################################################
# GMU-var: gmu_ud_SRC_ROOT
#	Define the root dir where all your source files(.c, .cpp, not .h) reside in.
# You can use a relative dir here, but note, it is relative to make-var $(CURDIR),
# not to this mki file.
############################################################################
gmu_ud_SRC_ROOT = ../..

############################################################################
# GMU-var: gmu_up_list_SRC_FROM_ROOT
#	Define your source files to compile, source files(dir prefix allowed) separated by spaces or tabs.
# You MUST use relative paths here, which are relative to $(gmu_ud_SRC_ROOT), 
# however, any of the resulting absolute path should not go up beyond $(gmu_ud_SRC_ROOT),
# e.g.
# * You cannot use ``../myfunc.c'', which actually resides in $(gmu_ud_SRC_ROOT)'s parent dir.
# * You can use ``subdir1/../myfunc.c'' or ``subdir1/subdir2/../myfunc.c'', which are 
#	still in $(gmu_ud_SRC_ROOT) or $(gmu_ud_SRC_ROOT)'s subdir.
############################################################################
gmu_up_list_SRC_FROM_ROOT += inftrees.c trees.c uncompr.c zutil.c adler32.c \
	compress.c crc32.c deflate.c gzio.c infback.c inffast.c inflate.c	

############################################################################
# GMU-var: gmu_ud_list_PRJ_HEADER
#	Define header file dirs, multiple dirs should be separated by spaces or tabs.
# You can use relative dirs here, but note, they are relative to make-var $(CURDIR),
# not to this mki file.
#	This var serves two purposes:
#	1. They'll be passed to the compiler through ``-I <dir1> -I <dir2> ...'' .
#	2. They'll be passed to `$(gmu_GCC_M_PREFIX)gcc -M' in favor of generating hdepend files.
############################################################################
gmu_ud_list_PRJ_HEADER += 

############################################################################
# GMU-vars: gmp_CFLAGS_XXX
#	Set specific compiler options for this project in the following vars:
# gmp_CFLAGS_CODE_GEN_ALL:
#	Any options that affect the generated binary code should be listed in it.
# gmp_CFLAGS_NON_CODE_GEN:
#	Any options that do not affect the generated binary code should be listed in it.
############################################################################

gmp_CFLAGS_CODE_GEN_ALL +=
  # You may want to dispense options for gmp_CFLAGS_CODE_GEN_ALL into following 3 categories:
  gmp_CFLAGS_MACRO_DEFS += # those macro defines
  gmp_CFLAGS_INCLUDES += # those -I xxx options (in case you don't want to list them in gmu_ud_list_PRJ_HEADER)
  gmp_CFLAGS_CODE_GEN += # other code generation related options

gmp_CFLAGS_NON_CODE_GEN +=


gmp_u_list_DLL_EXPORT_SYM = ZEXTERN

############################################################################
# GMU-vars: gmp_LINKFLAGS
#	Set linker options for this project in this var.
############################################################################
gmp_LINKFLAGS += 
  # There are some other make-vars for easy setting linker flags:
  gmp_ud_list_EXTRALIB += 
  	# list library paths here, compiler_config.mki will help you prepend(for example) 
  	# * -L for linuxgcc
  	# * /LIBPATH: for msvc

############################################################################
#	List extra objs or libs to link below, they'll be combined into gmp_ALL_TO_LINK
############################################################################
gmu_up_list_EXTRA_OBJ_TO_LINK +=
	# Extra object files to link

gmp_bc_EXTRALIBS += # $(call gmpf_MakeUpSysLibsToLink,<lib-list>)
	# Extra libs to link
	#
	# The reason for using gmpf_MakeUpSysLibsToLink: 
	# $(call gmpf_MakeUpSysLibsToLink,comfun) will become(for example):
	# * -lcomfun         for linuxgcc & mingw
	# * comfun.lib       for msvc

gmp_bc_SYSLIBS += # $(call gmpf_MakeUpSysLibsToLink,<sys-lib-list>)
	# List system libs in this make-var. 
	# If more than one sys-lib are used, separate them with spaces.
	#	note: The behavior of gmp_bc_SYSLIBS is exactly the same as gmp_bc_EXTRALIBS.
	# It is used just to imply that they are system libs(provided by compiler of OS).


# ----------- below for plugins -----------

# If you use plugin PI_sync_devoutput, you may want to set:
# gmi_SYDO_ud_SYNC_HEADER_ROOT
	#	The dir that your headers reside in. ( relative to $(CURDIR) )

# gmi_SYDO_up_list_SYNC_HEADERS
	# List filepaths of the header files to sync. ( relative to $(gmi_SYDO_ud_SYNC_HEADER_ROOT) )

# gmi_SYDO_ud_SYNC_HEADER_TO
	# Where the headers will be sync-ed to.

# gmi_SYDO_ud_SYNC_LIB_TO
# gmi_SYDO_ud_SYNC_DLL_TO
	# Where the static LIBs/DLLs will be sync-ed to. Sync-source is $(gmp_Gp_list_LIB_OUTPUT) .


@


1.4
log
@Rename gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT to gmi_SYDO_up_list_SYNC_HEADERS
@
text
@d89 1
a89 4
#gmp_bc_EXTRALIBS1 +=
	# Extra libs to link (not suggested to use currently, use gmp_bc_EXTRALIBS2 instead)

#gmp_bc_EXTRALIBS2 += $(call gmpf_MakeUpSysLibsToLink,<lib-list>)
d97 1
a97 1
#gmp_bc_SYSLIBS += $(call gmpf_MakeUpSysLibsToLink,<sys-lib-list>)
d100 1
a100 1
	#	note: The behavior of gmp_bc_SYSLIBS is exactly the same as gmp_bc_EXTRALIBS2.
@


1.3
log
@fix example u_srccfg_post.mki according to GMU change at v495
@
text
@d113 1
a113 1
# gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT
@


1.2
log
@dos2unix
@
text
@d69 3
@


1.1
log
@Initial revision
@
text
@d1 120
a120 120
#### template file for use with pattern1.mks, [GnumakeUniproc v1.0]
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

#---------------------------------------------------------------------------
# This file is to be included by $(gmu_DIR_GNUMAKEUNIPROC)/pattern1.mks 
# after the "compiler-config" files have been included. Commonly, you write
# your source files and compiler/linker options in this file.
#---------------------------------------------------------------------------

############################################################################
# GMU-var: gmu_uf_LINK_OUTPUT
#	Define the link ouput filename for this project.
# Decoration may be applied to this name which results in $(gmu_Gf_Final_LinkOutput).
# Using function gmpf_MakeExeName to construct output name makes the name more portable.
############################################################################
gmu_uf_LINK_OUTPUT = $(call gmpf_MakeDllNameForLink,ZLIB1)

############################################################################
# GMU-var: gmu_ud_SRC_ROOT
#	Define the root dir where all your source files(.c, .cpp, not .h) reside in.
# You can use a relative dir here, but note, it is relative to make-var $(CURDIR),
# not to this mki file.
############################################################################
gmu_ud_SRC_ROOT = ../..

############################################################################
# GMU-var: gmu_up_list_SRC_FROM_ROOT
#	Define your source files to compile, source files(dir prefix allowed) separated by spaces or tabs.
# You MUST use relative paths here, which are relative to $(gmu_ud_SRC_ROOT), 
# however, any of the resulting absolute path should not go up beyond $(gmu_ud_SRC_ROOT),
# e.g.
# * You cannot use ``../myfunc.c'', which actually resides in $(gmu_ud_SRC_ROOT)'s parent dir.
# * You can use ``subdir1/../myfunc.c'' or ``subdir1/subdir2/../myfunc.c'', which are 
#	still in $(gmu_ud_SRC_ROOT) or $(gmu_ud_SRC_ROOT)'s subdir.
############################################################################
gmu_up_list_SRC_FROM_ROOT += inftrees.c trees.c uncompr.c zutil.c adler32.c \
	compress.c crc32.c deflate.c gzio.c infback.c inffast.c inflate.c	

############################################################################
# GMU-var: gmu_ud_list_PRJ_HEADER
#	Define header file dirs, multiple dirs should be separated by spaces or tabs.
# You can use relative dirs here, but note, they are relative to make-var $(CURDIR),
# not to this mki file.
#	This var serves two purposes:
#	1. They'll be passed to the compiler through ``-I <dir1> -I <dir2> ...'' .
#	2. They'll be passed to `$(gmu_GCC_M_PREFIX)gcc -M' in favor of generating hdepend files.
############################################################################
gmu_ud_list_PRJ_HEADER += 

############################################################################
# GMU-vars: gmp_CFLAGS_XXX
#	Set specific compiler options for this project in the following vars:
# gmp_CFLAGS_CODE_GEN_ALL:
#	Any options that affect the generated binary code should be listed in it.
# gmp_CFLAGS_NON_CODE_GEN:
#	Any options that do not affect the generated binary code should be listed in it.
############################################################################

gmp_CFLAGS_CODE_GEN_ALL +=
  # You may want to dispense options for gmp_CFLAGS_CODE_GEN_ALL into following 3 categories:
  gmp_CFLAGS_MACRO_DEFS += # those macro defines
  gmp_CFLAGS_INCLUDES += # those -I xxx options (in case you don't want to list them in gmu_ud_list_PRJ_HEADER)
  gmp_CFLAGS_CODE_GEN += # other code generation related options

gmp_CFLAGS_NON_CODE_GEN +=

############################################################################
# GMU-vars: gmp_LINKFLAGS
#	Set linker options for this project in this var.
############################################################################
gmp_LINKFLAGS += 
  # There are some other make-vars for easy setting linker flags:
  gmp_ud_list_EXTRALIB += 
  	# list library paths here, compiler_config.mki will help you prepend(for example) 
  	# * -L for linuxgcc
  	# * /LIBPATH: for msvc

############################################################################
#	List extra objs or libs to link below, they'll be combined into gmp_ALL_TO_LINK
############################################################################
gmu_up_list_EXTRA_OBJ_TO_LINK +=
	# Extra object files to link

#gmp_bc_EXTRALIBS1 +=
	# Extra libs to link (not suggested to use currently, use gmp_bc_EXTRALIBS2 instead)

#gmp_bc_EXTRALIBS2 += $(call gmpf_MakeUpSysLibsToLink,<lib-list>)
	# Extra libs to link
	#
	# The reason for using gmpf_MakeUpSysLibsToLink: 
	# $(call gmpf_MakeUpSysLibsToLink,comfun) will become(for example):
	# * -lcomfun         for linuxgcc & mingw
	# * comfun.lib       for msvc

#gmp_bc_SYSLIBS += $(call gmpf_MakeUpSysLibsToLink,<sys-lib-list>)
	# List system libs in this make-var. 
	# If more than one sys-lib are used, separate them with spaces.
	#	note: The behavior of gmp_bc_SYSLIBS is exactly the same as gmp_bc_EXTRALIBS2.
	# It is used just to imply that they are system libs(provided by compiler of OS).


# ----------- below for plugins -----------

# If you use plugin PI_sync_devoutput, you may want to set:
# gmi_SYDO_ud_SYNC_HEADER_ROOT
	#	The dir that your headers reside in. ( relative to $(CURDIR) )

# gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT
	# List filepaths of the header files to sync. ( relative to $(gmi_SYDO_ud_SYNC_HEADER_ROOT) )

# gmi_SYDO_ud_SYNC_HEADER_TO
	# Where the headers will be sync-ed to.

# gmi_SYDO_ud_SYNC_LIB_TO
# gmi_SYDO_ud_SYNC_DLL_TO
	# Where the static LIBs/DLLs will be sync-ed to. Sync-source is $(gmp_Gp_list_LIB_OUTPUT) .


@


1.1.1.1
log
@import cvs module zlib
@
text
@@
