head	1.6;
access;
symbols
	trelease:1.1.1.1 tvendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2008.06.28.02.26.04;	author chj;	state Exp;
branches;
next	1.5;
deltatype	text;
kopt	kv;
permissions	666;
commitid	4b84865a13c097d;
filename	u_srccfg_post.mki;

1.5
date	2007.10.03.14.11.53;	author chj;	state Exp;
branches;
next	1.4;
deltatype	text;
kopt	kv;
commitid	7f254703a3294567;

1.4
date	2007.10.03.13.50.37;	author chj;	state Exp;
branches;
next	1.3;
deltatype	text;
kopt	kv;
commitid	784747039e2d4567;

1.3
date	2007.10.03.13.44.49;	author chj;	state Exp;
branches;
next	1.2;
deltatype	text;
kopt	kv;
commitid	76c547039cd14567;

1.2
date	2007.10.03.13.31.02;	author chj;	state Exp;
branches;
next	1.1;
deltatype	text;
kopt	kv;
commitid	74e5470399964567;

1.1
date	2007.10.03.12.52.56;	author chj;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;
kopt	kv;
commitid	7428470390a84567;

1.1.1.1
date	2007.10.03.12.52.56;	author chj;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
commitid	7428470390a84567;


desc
@@


1.6
log
@Rename gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT to gmi_SYDO_up_list_SYNC_HEADERS
@
text
@#### template file for use with pattern1.mks, [GnumakeUniproc v1.0]
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

#---------------------------------------------------------------------------
# This file is to be included by $(gmu_DIR_GNUMAKEUNIPROC)/pattern1.mks 
# after the "compiler-config" files have been included. Commonly, you write
# your source files and compiler/linker options in this file.
#---------------------------------------------------------------------------

############################################################################
# GMU-var: gmu_uf_LINK_OUTPUT
#	Define the link ouput filename for this project.
# Decoration may be applied to this name which results in $(gmu_Gf_Final_LinkOutput).
# Using function gmpf_MakeExeName to construct output name makes the name more portable.
############################################################################
gmu_uf_LINK_OUTPUT = $(call gmpf_MakeExeName,zlib-minigzip)

############################################################################
# GMU-var: gmu_ud_SRC_ROOT
#	Define the root dir where all your source files(.c, .cpp, not .h) reside in.
# You can use a relative dir here, but note, it is relative to make-var $(CURDIR),
# not to this mki file.
############################################################################
d_ThisPrjRoot = ..
gmu_ud_SRC_ROOT = $(d_ThisPrjRoot)

############################################################################
# GMU-var: gmu_up_list_SRC_FROM_ROOT
#	Define your source files to compile, source files(dir prefix allowed) separated by spaces or tabs.
# You MUST use relative paths here, which are relative to $(gmu_ud_SRC_ROOT), 
# however, any of the resulting absolute path should not go up beyond $(gmu_ud_SRC_ROOT),
# e.g.
# * You cannot use ``../myfunc.c'', which actually resides in $(gmu_ud_SRC_ROOT)'s parent dir.
# * You can use ``subdir1/../myfunc.c'' or ``subdir1/subdir2/../myfunc.c'', which are 
#	still in $(gmu_ud_SRC_ROOT) or $(gmu_ud_SRC_ROOT)'s subdir.
############################################################################
gmu_up_list_SRC_FROM_ROOT += minigzip.c

############################################################################
# GMU-var: gmu_ud_list_PRJ_HEADER
#	Define header file dirs, multiple dirs should be separated by spaces or tabs.
# You can use relative dirs here, but note, they are relative to make-var $(CURDIR),
# not to this mki file.
#	This var serves two purposes:
#	1. They'll be passed to the compiler through ``-I <dir1> -I <dir2> ...'' .
#	2. They'll be passed to `$(gmu_GCC_M_PREFIX)gcc -M' in favor of generating hdepend files.
############################################################################
gmu_ud_list_PRJ_HEADER += $(d_ThisPrjRoot)/../zlib
	# zlib.h is in that dir

############################################################################
# GMU-vars: gmp_CFLAGS_XXX
#	Set specific compiler options for this project in the following vars:
# gmp_CFLAGS_CODE_GEN_ALL:
#	Any options that affect the generated binary code should be listed in it.
# gmp_CFLAGS_NON_CODE_GEN:
#	Any options that do not affect the generated binary code should be listed in it.
############################################################################

gmp_CFLAGS_CODE_GEN_ALL +=
  # You may want to dispense options for gmp_CFLAGS_CODE_GEN_ALL into following 3 categories:
  gmp_CFLAGS_MACRO_DEFS += # those macro defines
  gmp_CFLAGS_INCLUDES += # those -I xxx options (in case you don't want to list them in gmu_ud_list_PRJ_HEADER)
  gmp_CFLAGS_CODE_GEN += # other code generation related options

gmp_CFLAGS_NON_CODE_GEN +=

############################################################################
# GMU-vars: gmp_LINKFLAGS
#	Set linker options for this project in this var.
############################################################################
gmp_LINKFLAGS += 
  # There are some other make-vars for easy setting linker flags:
  gmp_ud_list_EXTRALIB += 
  	# list library paths here, compiler_config.mki will help you prepend(for example) 
  	# * -L for linuxgcc
  	# * /LIBPATH: for msvc


#---------------------------------------------------------------------------
# Sub-projects definition starts here. 
# Library(static lib or DLL) projects may well be your sub-projects for this EXE project
#---------------------------------------------------------------------------
############################################################################
# GMU-var: gmu_uv_list_SUBPRJ_TO_LINK
#	This var tells which projects are sub-project for this project(parent project), 
# and, for sub-projects listed in this var, their output-images will automatically 
# become link components for parent project.
#
# GMU-var: gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL
#	This one is the superset of gmu_uv_list_SUBPRJ_TO_LINK. It's powerful.
#	Not only output-images of sub-projects explicitly listed in gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL 
# will be linked by this project, but also sub-projects' of those explictly listed ones 
# -- any level of sub-projects can be linked. Anyhow, there other two factors that 
# determines whether deeper projects' outputs will be automatically linked:
# 1. a deeper project must claim himself a link-component(gmu_I_AM_A_LINK_COMPONENT=1).
# You know, if you use pattern1.mks, LIB image-type has gmu_I_AM_A_LINK_COMPONENT=1 
# already defined.
# 2. For your sub-project(called SP), SP must define his sub-projects(called SPPs)
# in gmu_uv_list_SUBPRJ_LINK_FOR_PARENT in order for SPPs to be linked automatically
# by you.
############################################################################

gmu_uv_list_SUBPRJ_TO_LINK = ZLib
# or
#gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL = ...

######## Details of your sub-projects go here: ########

ZLib_Makefile = $(d_ThisPrjRoot)/../zlib/makelib/dll.$(gmp_COMPILER_ID)/Makefile
# If the sub-project's makefiles are to be checked-out from some repository, assign it here.
# >>>> For CVS checkout
ZLib_cvsRoot_forMakefiles = $(call gmuf_MakeCvsRepositoryPath,,$(gmu_DIR_ROOT)/demo-repositories$(gmu_DEMO_CO_BRANCH)/cvsreps-zlib-demo)
	# CVSROOT for the checkout
	# Hint: $(call gmuf_MakeCvsRepositoryPath,<CVS-server-var>,<repository-path-on-CVS-server>)
ZLib_cvsModuleDir_forMakefiles = zlib
	# CVS module name or module dir to checkout
ZLib_cvsLocalDir_forMakefiles = $(d_ThisPrjRoot)/..
ZLib_cvsTag_forMakefiles = # Tag or branch to checkout(string after cvs's -r switch)
# <<<< For CVS checkout

# NOTE for novice: Don't try to make sub-projects' output libs listed in gmp_ALL_TO_LINK,
# those libs will be listed in gmp_ALL_TO_LINK automatically.


# ----------- below for plugins -----------

# If you use plugin PI_sync_devoutput, you may want to set:
# gmi_SYDO_ud_SYNC_HEADER_ROOT
	#	The dir that your headers reside in. ( relative to $(CURDIR) )

# gmi_SYDO_up_list_SYNC_HEADERS
	# List filepaths of the header files to sync. ( relative to $(gmi_SYDO_ud_SYNC_HEADER_ROOT) )

# gmi_SYDO_ud_SYNC_HEADER_TO
	# Where the headers will be sync-ed to.

# gmi_SYDO_ud_SYNC_LIB_TO
# gmi_SYDO_ud_SYNC_DLL_TO
	# Where the static LIBs/DLLs will be sync-ed to. Sync-source is $(gmp_Gp_list_LIB_OUTPUT) .


@


1.5
log
@dos2unix
@
text
@d134 1
a134 1
# gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT
@


1.4
log
@to test3 typo fix
@
text
@d1 144
a144 144
#### template file for use with pattern1.mks, [GnumakeUniproc v1.0]
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

#---------------------------------------------------------------------------
# This file is to be included by $(gmu_DIR_GNUMAKEUNIPROC)/pattern1.mks 
# after the "compiler-config" files have been included. Commonly, you write
# your source files and compiler/linker options in this file.
#---------------------------------------------------------------------------

############################################################################
# GMU-var: gmu_uf_LINK_OUTPUT
#	Define the link ouput filename for this project.
# Decoration may be applied to this name which results in $(gmu_Gf_Final_LinkOutput).
# Using function gmpf_MakeExeName to construct output name makes the name more portable.
############################################################################
gmu_uf_LINK_OUTPUT = $(call gmpf_MakeExeName,zlib-minigzip)

############################################################################
# GMU-var: gmu_ud_SRC_ROOT
#	Define the root dir where all your source files(.c, .cpp, not .h) reside in.
# You can use a relative dir here, but note, it is relative to make-var $(CURDIR),
# not to this mki file.
############################################################################
d_ThisPrjRoot = ..
gmu_ud_SRC_ROOT = $(d_ThisPrjRoot)

############################################################################
# GMU-var: gmu_up_list_SRC_FROM_ROOT
#	Define your source files to compile, source files(dir prefix allowed) separated by spaces or tabs.
# You MUST use relative paths here, which are relative to $(gmu_ud_SRC_ROOT), 
# however, any of the resulting absolute path should not go up beyond $(gmu_ud_SRC_ROOT),
# e.g.
# * You cannot use ``../myfunc.c'', which actually resides in $(gmu_ud_SRC_ROOT)'s parent dir.
# * You can use ``subdir1/../myfunc.c'' or ``subdir1/subdir2/../myfunc.c'', which are 
#	still in $(gmu_ud_SRC_ROOT) or $(gmu_ud_SRC_ROOT)'s subdir.
############################################################################
gmu_up_list_SRC_FROM_ROOT += minigzip.c

############################################################################
# GMU-var: gmu_ud_list_PRJ_HEADER
#	Define header file dirs, multiple dirs should be separated by spaces or tabs.
# You can use relative dirs here, but note, they are relative to make-var $(CURDIR),
# not to this mki file.
#	This var serves two purposes:
#	1. They'll be passed to the compiler through ``-I <dir1> -I <dir2> ...'' .
#	2. They'll be passed to `$(gmu_GCC_M_PREFIX)gcc -M' in favor of generating hdepend files.
############################################################################
gmu_ud_list_PRJ_HEADER += $(d_ThisPrjRoot)/../zlib
	# zlib.h is in that dir

############################################################################
# GMU-vars: gmp_CFLAGS_XXX
#	Set specific compiler options for this project in the following vars:
# gmp_CFLAGS_CODE_GEN_ALL:
#	Any options that affect the generated binary code should be listed in it.
# gmp_CFLAGS_NON_CODE_GEN:
#	Any options that do not affect the generated binary code should be listed in it.
############################################################################

gmp_CFLAGS_CODE_GEN_ALL +=
  # You may want to dispense options for gmp_CFLAGS_CODE_GEN_ALL into following 3 categories:
  gmp_CFLAGS_MACRO_DEFS += # those macro defines
  gmp_CFLAGS_INCLUDES += # those -I xxx options (in case you don't want to list them in gmu_ud_list_PRJ_HEADER)
  gmp_CFLAGS_CODE_GEN += # other code generation related options

gmp_CFLAGS_NON_CODE_GEN +=

############################################################################
# GMU-vars: gmp_LINKFLAGS
#	Set linker options for this project in this var.
############################################################################
gmp_LINKFLAGS += 
  # There are some other make-vars for easy setting linker flags:
  gmp_ud_list_EXTRALIB += 
  	# list library paths here, compiler_config.mki will help you prepend(for example) 
  	# * -L for linuxgcc
  	# * /LIBPATH: for msvc


#---------------------------------------------------------------------------
# Sub-projects definition starts here. 
# Library(static lib or DLL) projects may well be your sub-projects for this EXE project
#---------------------------------------------------------------------------
############################################################################
# GMU-var: gmu_uv_list_SUBPRJ_TO_LINK
#	This var tells which projects are sub-project for this project(parent project), 
# and, for sub-projects listed in this var, their output-images will automatically 
# become link components for parent project.
#
# GMU-var: gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL
#	This one is the superset of gmu_uv_list_SUBPRJ_TO_LINK. It's powerful.
#	Not only output-images of sub-projects explicitly listed in gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL 
# will be linked by this project, but also sub-projects' of those explictly listed ones 
# -- any level of sub-projects can be linked. Anyhow, there other two factors that 
# determines whether deeper projects' outputs will be automatically linked:
# 1. a deeper project must claim himself a link-component(gmu_I_AM_A_LINK_COMPONENT=1).
# You know, if you use pattern1.mks, LIB image-type has gmu_I_AM_A_LINK_COMPONENT=1 
# already defined.
# 2. For your sub-project(called SP), SP must define his sub-projects(called SPPs)
# in gmu_uv_list_SUBPRJ_LINK_FOR_PARENT in order for SPPs to be linked automatically
# by you.
############################################################################

gmu_uv_list_SUBPRJ_TO_LINK = ZLib
# or
#gmu_uv_list_SUBPRJ_LINK_ALL_LEVEL = ...

######## Details of your sub-projects go here: ########

ZLib_Makefile = $(d_ThisPrjRoot)/../zlib/makelib/dll.$(gmp_COMPILER_ID)/Makefile
# If the sub-project's makefiles are to be checked-out from some repository, assign it here.
# >>>> For CVS checkout
ZLib_cvsRoot_forMakefiles = $(call gmuf_MakeCvsRepositoryPath,,$(gmu_DIR_ROOT)/demo-repositories$(gmu_DEMO_CO_BRANCH)/cvsreps-zlib-demo)
	# CVSROOT for the checkout
	# Hint: $(call gmuf_MakeCvsRepositoryPath,<CVS-server-var>,<repository-path-on-CVS-server>)
ZLib_cvsModuleDir_forMakefiles = zlib
	# CVS module name or module dir to checkout
ZLib_cvsLocalDir_forMakefiles = $(d_ThisPrjRoot)/..
ZLib_cvsTag_forMakefiles = # Tag or branch to checkout(string after cvs's -r switch)
# <<<< For CVS checkout

# NOTE for novice: Don't try to make sub-projects' output libs listed in gmp_ALL_TO_LINK,
# those libs will be listed in gmp_ALL_TO_LINK automatically.


# ----------- below for plugins -----------

# If you use plugin PI_sync_devoutput, you may want to set:
# gmi_SYDO_ud_SYNC_HEADER_ROOT
	#	The dir that your headers reside in. ( relative to $(CURDIR) )

# gmi_SYDO_up_list_SYNC_HEADER_FROM_ROOT
	# List filepaths of the header files to sync. ( relative to $(gmi_SYDO_ud_SYNC_HEADER_ROOT) )

# gmi_SYDO_ud_SYNC_HEADER_TO
	# Where the headers will be sync-ed to.

# gmi_SYDO_ud_SYNC_LIB_TO
# gmi_SYDO_ud_SYNC_DLL_TO
	# Where the static LIBs/DLLs will be sync-ed to. Sync-source is $(gmp_Gp_list_LIB_OUTPUT) .


@


1.3
log
@to test2
@
text
@d115 1
a115 1
Zlib_cvsRoot_forMakefiles = $(call gmuf_MakeCvsRepositoryPath,,$(gmu_DIR_ROOT)/demo-repositories$(gmu_DEMO_CO_BRANCH)/cvsreps-zlib-demo)
@


1.2
log
@to test
@
text
@d120 1
a120 1
ZLib_cvsLocalDir_forMakefiles = $(d_ThisPrjRoot)/../zlib
@


1.1
log
@Initial revision
@
text
@d114 9
a122 7
# >>>> For SVN checkout
ZLib_svnUrl_forMakefiles = file:///$(gmu_DIR_ROOT)/demo-repositories$(gmu_DEMO_CO_BRANCH)/svnreps-zlib/trunk
	# Hint: $(call gmuf_MakeSvnRepositoryPath,<SVN-path-prefix-var>,<remaining-repository-path>)
ZLib_svnLocalDir_forMakefiles = $(d_ThisPrjRoot)/../zlib
	# Local dir corresponding to the whole SVN URL
ZLib_svnRev = # Revision to use(string after svn's -r switch)
# <<<< For SVN checkout
@


1.1.1.1
log
@import cvs module zlib-minigzip
@
text
@@
