ifndef __pattern1_common_included_
__pattern1_common_included_ = 1

# This file hold the content required by pattern1.mks and pattern-container1.mks.

unexport gmp_u_list_PLUGIN_TO_LOAD
	# Avoid user's setting gmp_u_list_PLUGIN_TO_LOAD in env-var resulting in
	# influencing sub-projects. If required for all subprjs, set
	# gmp_u_list_PLUGIN_TO_LOAD_ENV_PRE or gmp_u_list_PLUGIN_TO_LOAD_ENV_POST instead.
unexport gmp_u_list_PLUGIN_TO_LOAD_AUX_PRE
unexport gmp_u_list_PLUGIN_TO_LOAD_AUX_POST


gmu_FREE_STYLE_MAKEFILE += $(gmu_DELIBERATE_NO_SUBPRJ)
gmu_DO_IGNORE_SUBPRJS += $(gmu_IGNORE_SUBPRJS)
	# 2010-04-27 Make old name gmu_DELIBERATE_NO_SUBPRJ,gmu_IGNORE_SUBPRJS inferior, (old name not tested after deprecation).


_dirPattern1Cfg = pattern1cfg
_dircDefaultPlugin = pattern1cfg/plugins

gmp_p_mki_DecoPrjname = $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirPattern1Cfg)/bc_deco_prjname.mki
gmp_p_mki_DecoUnicodeDebug = $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirPattern1Cfg)/bc_deco_UNICODE_DEBUG.mki
gmp_p_mki_LoadPlugins = $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-load-plugins.mki
gmp_p_mki_LoadPluginsPostcore = $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-load-plugins-postcore.mki

# >>>>>> Custom action count functionality [2006-12-05]

_d_CustomActionList = $(_d_OUTPUT_ROOT_GMUTMP)/CustomActionCount
_p_CustomActionList = $(_d_CustomActionList)/ActionList.txt

#_ActnameToFilename = $1.gmu.cnt
_ActnameToFilepath = $(_d_CustomActionList)/$1.gmu.cnt

gmu_up_list_STARTUP_CLEAR_FILES += $(_p_CustomActionList)

# The function here:
gmpf_AddCustomActionCount = $(shell \
	gmuAddActionWord $(_p_CustomActionList) $1; \
	$(if $(call _IsOlderThanBuildStart,$(call _ActnameToFilepath,$1)),echo -n "" > $(call _ActnameToFilepath,$1);) \
    echo C >> $(call _ActnameToFilepath,$1)\
    )
	# $1: custom action name(action word). Don't use space/tab and other sensitive chars.

# <<<<<< Custom action count functionality [2006-12-05]

### Define internal function: _GmpMakeLevel0ShowEnd

ifeq ($(MAKELEVEL),0)
  define _GmpMakeLevel0ShowEnd
	echo "[[[END]]]                                        $(subst $(_GmuSpace),,$(call _JoinResultCharCount,Projects: $(_GmuComma)Containers: +,+= R r))"
	echo "Files compiled: $(call _JoinResultCharCount,C++: C: ASM: linked:,x c a l)"
	$(if $(call _IsStringEqual,$(strip $(call _CountCompileChar,V v S s)),0 0 0 0),,echo "$(subst $(_GmuSpace),,$(call _JoinResultCharCount,CVS-action: + $(_GmuComma)SVN-action: +,V v S s))")
# Now show custom-compile action count
	if [ -n "$(_p_CustomActionList)" ] && [ -s "$(_p_CustomActionList)" ]; then \
		echo "Custom action count:"; \
		_ActList=`cat $(_p_CustomActionList)`; \
		for OneFile in $$_ActList; do echo "    $$OneFile: "`gmuCountChar $(call _ActnameToFilepath,$$OneFile) C`; done; \
	fi
# Write count summary to 
	echo "$(subst $(_GmuSpace),,$(call _JoinResultCharCount,Projects: ;(update: $(_GmuComma)up-to-date: )...Containers: +,p + = R r))" >> $(_p_BuiltListOutput)
  endef
else # ^^^^ ifeq ($(MAKELEVEL),0) ^^^^
  define _GmpMakeLevel0ShowEnd
	echo "" # show a new line
  endef
endif

define _Gmp1SharedFinishingCmds
	$(_RM) $(_p_ThisPrjBuildInProgress)
	$(gmu_u_SHOW_PROGRESS_CMD)
	$(_GmpMakeLevel0ShowEnd)
endef

# Still referring to the old 'gmp_USER_FIRST_TARGET' for backward compatibility.

gmp_up_USER_OUTPUT_AFTER_LINK += $(gmp_USER_FIRST_TARGET)
	# For compatibility of the old var gmp_USER_FIRST_TARGET .
	# [2008-12-01]Note: Don't have $(gmp_USER_FIRST_TARGET) immediate expand here, because
	# a custom-image-mki author will assign gmp_USER_FIRST_TARGET in his mki after pattern1-common.mki .
	# Although I can move this backward, but writting it here makes pattern1.mks & pattern-container1.mks share it.

ifneq (,$(_gmp_up_USER_OUTPUT_AFTER_LINK_s))
ifneq (,$(gmp_USER_FREE_STYLE_TARGET))
	$(error !GMP!Error: gmp_up_USER_OUTPUT_AFTER_LINK and gmp_USER_FREE_STYLE_TARGET are both defined)
	# [2009-12-23] gmp_USER_FREE_STYLE_TARGET is an intuitive name for GMU free-style makefiles.
	# Note: gmp_USER_FREE_STYLE_TARGET is ONLY used in GMU free-style makefiles.
endif
endif

_gmp_up_USER_OUTPUT_AFTER_LINK_s = $(strip $(gmp_up_USER_OUTPUT_AFTER_LINK))
_gmp_USER_FREE_STYLE_TARGET_s = $(strip $(gmp_USER_FREE_STYLE_TARGET))

gmi_SYDO_ud_SYNC_UserOutputAL_FROM = $(call gmuf_GetDir,$(_gmp_up_USER_OUTPUT_AFTER_LINK_s))
#gmi_SYDO_ud_SYNC_UserOutputAL_TO = (should be assigned from parent, and normally, from env)
gmi_SYDO_up_list_SYNC_UserOutputAL = $(notdir $(_gmp_up_USER_OUTPUT_AFTER_LINK_s))


define _GmpShowDoneUserOutputAfterLink
  $(if $(_gmp_up_USER_OUTPUT_AFTER_LINK_s),echo "[DONE(gmp_up_USER_OUTPUT_AFTER_LINK):] $(call _StripOutputRootPrefix,$(_gmp_up_USER_OUTPUT_AFTER_LINK_s))")
  $(if $(_gmp_USER_FREE_STYLE_TARGET_s),echo "[DONE(gmp_USER_FREE_STYLE_TARGET):] $(_gmp_USER_FREE_STYLE_TARGET_s)")
endef


_IsInBuildSelfStage = $(if $(gmu_uv_list_ALL_SUBPRJ),$(if $(_NowCheckIsSubprjsDone),1),1)

_gmu_dyn_title_count = $(shell gmuCountChar $(gmu_Gp_COUNT_COMPILE) += Rr)
gmu_progress_info = $(join Projects= Containers=,$(_gmu_dyn_title_count))  Now: $(gmu_G_Deco_PrjName)($(gmu_PRJ_NAME))$(if $(_IsInBuildSelfStage),,...)

_gmuBuildListIndent = $(patsubst %,$(_GmuSpace),$(wordlist 1,$(MAKELEVEL),$(_gmuDotList)))

_PrjnameShowInList = [$(gmu_G_Deco_PrjName)($(gmu_PRJ_NAME))]

_ExpectGetPrjAttrIncludeUserMki = $(if $(gmp_BYPASS_USER_MKI_WHEN_GET_PRJ_ATTR),,1)

_ShouldIncludeUserMki = $(if $(_isNowNotGmuGetPrjAttr)$(_ExpectGetPrjAttrIncludeUserMki),1,)

define _gmuf_ExecuteShcmdList
$(foreach c,$1,@$($c)
)
endef
	# $1 contains a list of makevars; each makevar in turn expands to a shell command.
	# One shell command in $1 is executed in its own subshell.
	# Note: the ')' must be on a separate line to accomplish that "individual shell" requirement.


gmp_G_UDFilenameSuffix = $(if $(gmp_isfnDecoUnicode),_U)$(if $(gmp_isfnDecoDebug),_D)
gmp_G_UFilenameSuffix = $(if $(gmp_isfnDecoUnicode),_U)

gmpf_Add_UnicodeDebug_Deco = $(addsuffix $(gmp_G_UDFilenameSuffix),$1)
	# [2007-02-12] If for a EXE project, the user wants to link his libs from a dedicated 
	# place(dir), -- i.e. not listing lib-projects as his sub-project, -- he may use this
	# function to dynamically determine what variant of libs to link(XXX.lib, XXX_D.lib 
	# XXX_U.lib or XXX_U_D.lib).

gmpf_Add_Unicode_Deco = $(addsuffix $(gmp_G_UFilenameSuffix),$1)


endif
