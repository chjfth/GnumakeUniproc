# ====== pattern1.mks , 's' means "stem". =========
# This is the general pattern for inegrating the core layer of GnumakeUniproc(GnumakeUniproc.mki) 
# and a specific compiler, so that an program(EXE,LIB,or DLL) can be compiled and linked.
# This "stem" chains the following things to accomplish the whole work:
# * u_srccfg_pre.mki         (user defined)
# * [custom-image-mki]       
# * compiler_config.mki      (compiler extension author defined)
# * [custom-image-mki (second try)]       
# * [plugins]
# * u_srccfg_post.mki        [U](user defined)
# * u_checkout_more.mki      [U](user defined, to checkout extra files required by this project)
# * [compiler-config pre-core]  (compiler extension author defined, immediately before GnumakeUniproc.mki)
# * GnumakeUniproc.mki       (the GnumakeUniproc core layer)
# * u_post_gmucore.mki       [U](user defined)
# * [plugins post-core]
# * [custom-image-mki post-core]
# * [compiler-config post-core]  (compiler extension author defined)

# Special: If gmp_BYPASS_USER_MKI_WHEN_GET_PRJ_ATTR=1, those marked [U] will
#		not be included when _isNowGmuGetPrjAttr==1 .

# === Q&A  ===
#	Q: What if I(the user) want to generate my final output from $(gmu_Gp_LINK_OUTPUT),
# e.g. I want to zip the output image from the linker.
#	Answer: 
#	There are several steps.
#	0. Assume that $(gmu_Gp_LINK_OUTPUT) is XYZ.exe 
#	1. Before you include pattern1.mks(this file), you should set a make-var
# gmp_up_USER_OUTPUT_AFTER_LINK to be your final output(as for our example, XYZ.zip),
# Normally you would like to use = (instead of :=) to set gmp_up_USER_OUTPUT_AFTER_LINK, 
# because you may probably expect its value to be expanded AFTER GnumakeUniproc.mki . 
# that is, you can set it as follows:
#
#	gmp_up_USER_OUTPUT_AFTER_LINK = $(basename $(gmu_Gp_LINK_OUTPUT)).zip
#
#	Setting gmp_up_USER_OUTPUT_AFTER_LINK makes the real "first-target" of the whole makefile 
# become $(gmp_up_USER_OUTPUT_AFTER_LINK).
#	2. And there is more, you may want the same user-defined post-processing
# for many projects(which all belong to the same project modal), then you
# probably want to write your post-processing partial-makefile once, and include
# it for every project. Well, the normal way to accomplish this is to define
# your "custom image type" processor. See "Load custom-image-mki" sections below
# for more details.

##############################################################################

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
.PHONY: _gmp_first_target
.PHONY: __pattern1_first_target
_gmp_first_target: __pattern1_first_target # at rear part of this file
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

include $(gmu_DIR_GNUMAKEUNIPROC)/CommonFunctions.mki # For function `_GetExtName'

include $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-common.mki


ifeq (,$(gmp_COMPILER_ID))
  gmp_COMPILER_ID := $(call gmuf_GetExtName,$(gmu_d_StartupMakefile))
  _d_UserPartialMakefiles := $(gmu_d_StartupParent)
else
  ifeq ($(gmp_COMPILER_ID),$(call gmuf_GetExtName,$(gmu_d_StartupMakefile)))
    _d_UserPartialMakefiles := $(gmu_d_StartupParent)
    #	[2007-01-16] This condition can be required when you start a non-container project
    # from a container project. The container project may pass gmp_COMPILER_ID=. to his 
    # non-container sub-project, and current start-up makefile dir is definitely not what the non-container requires.
  else
    _d_UserPartialMakefiles = $(gmu_d_StartupMakefile)
	#	[2006-12-18] User is allowed to define gmp_COMPILER_ID explicitly.
	# If that is the case, u_srccfg_post.mki, u_post_gmucore.mki etc will
	# be read from current start-up makefile dir.
  endif
endif
gmu_Gd_UserPartialMki = $(_d_UserPartialMakefiles)

ifeq (,$(gmp_COMPILER_ID))
  $(error !GMU!Error: From pattern1.mks: `gmp_COMPILER_ID' can not be extracted from current dir's extension name, nor is it defined by you explicitly)
endif

_gmu_isUmakeTargetReqCompiler = $(if $(call _FindStrings,$(MAKECMDGOALS),_gmu_ut_GetPrjAttr gmu_ut_diagnose gmu_ut_checkout gmu_ut_export),,1)
_gmu_isUmakeTargetNoReqCompiler = $(if $(_gmu_isMakeTargetReqCompiler),,1)

###########################################################

_gmu_fm_srccfg_pre = u_srccfg_pre
_gmu_fm_srccfg_post = u_srccfg_post

_p_checkout_more = $(_d_UserPartialMakefiles)/u_checkout_more.mki#[2007-03-30]This should better not contain $(gmp_MKS_PATTERN_FILENAME_SUFFIX)
_p_srccfg_pre = $(_d_UserPartialMakefiles)/$(_gmu_fm_srccfg_pre)$(gmp_MKS_PATTERN_FILENAME_SUFFIX).mki
_p_srccfg_post = $(_d_UserPartialMakefiles)/$(_gmu_fm_srccfg_post)$(gmp_MKS_PATTERN_FILENAME_SUFFIX).mki
_p_post_gmucore = $(_d_UserPartialMakefiles)/u_post_gmucore$(gmp_MKS_PATTERN_FILENAME_SUFFIX).mki

ifeq ($(_ShouldIncludeUserMki),1)
  ifneq (,$(wildcard $(_p_srccfg_pre))) # include it if exist
    include $(_p_srccfg_pre)
  endif
endif

_dircDefaultPlugin = pattern1cfg/plugins

# Load custom-image-mki if gmp_LOAD_CUSTOM_IMAGE_IT is defined
ifeq (1,$(gmp_LOAD_CUSTOM_IMAGE_IT))
  include $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-load-custom-it.mki
endif


# >>>>>> Load compiler cfg here
include $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-load-compiler-cfg.mki
# <<<<<< Load compiler cfg here


# >>>>>> Load custom-image-type mki (if gmp_bc_IMAGE_TYPE is not a predefined one) [2006-12-04]

# A second try to load custom-image-mki(for compatibility of GnumakeUniproc v0.92 and prior)
ifeq (,$(gmu_u_LINK_CMD)) 
ifeq (,$(gmp_LOAD_CUSTOM_IMAGE_IT))
  include $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-load-custom-it.mki
endif
endif # ifeq (,$(gmu_u_LINK_CMD)) 

# <<<<<< Load custom-image-type mki [2006-12-04]


include $(gmp_p_mki_LoadPlugins)


ifeq ($(_ShouldIncludeUserMki),1)
  ifneq (,$(wildcard $(_p_srccfg_post))) # include it if exist
    include $(_p_srccfg_post)
  endif

  ifneq (,$(wildcard $(_p_checkout_more))) # include it if exist
    include $(_p_checkout_more)
  endif
	# [2008-07-03] This must be placed before GnumakeUniproc.mki, in other word,
	# gmu_uv_list_SVN_MODULES,gmu_uv_list_CVS_MODULES must be defined before GnumakeUniproc.mki,
	# -- because gmu_uv_list_SVN/CVS_MODULES are immediately expanded in GnumakeUniproc.mki .
endif


include $(gmp_p_mki_DecoPrjname) # Decorate compiler-id&ver
include $(gmp_p_mki_DecoUnicodeDebug) # include bc_deco_UNICODE_DEBUG.mki
	# [2008-09-10] Do these two decoration here so that they appear after all other user decoration.


ifneq (,$(gmp_up_COMPILER_CFG_PRECORE_TO_LOAD))
  include $(gmp_up_COMPILER_CFG_PRECORE_TO_LOAD)
endif
	# [2008-09-10] This pre-core mki is considered a special privilege for compiler-config-mki.
	# It is included immediately before GnumakeUniproc.mki, so that in this pre-core mki,
	# we can be sure all expansion-in-core gmu-vars have been established, e.g. gmu_Gp_LINK_OUTPUT
	# is established(no gmu_DECO_SUFFIX_LINK_OUTPUT assignment will affect it, etc).
	# Today, the idea of this pre-core file comes into being this way: 
	#	For Windows/WinCE compiler config, applying ``gmu_DECO_SUFFIX_LINK_OUTPUT += --imp''
	# in this file can guarantee no user makefiles can add further suffix to the link output.
 


#############################################################################
#################### THE CORE FILE GnumakeUniproc.mki #######################
#############################################################################
_p_GnumakeUniproc = $(gmu_DIR_GNUMAKEUNIPROC)/GnumakeUniproc.mki
ifeq (,$(wildcard $(_p_GnumakeUniproc)))
  $(error !$(_p_GnumakeUniproc) not exist, I cannot continue.)
endif
include $(_p_GnumakeUniproc)



ifeq (,$(strip $(gmu_uf_LINK_OUTPUT)))
  $(error !GMP!Error: Your gmu_uf_LINK_OUTPUT is null, but pattern1.mks requires you define gmu_uf_LINK_OUTPUT.\
 In case this is a container project not generating any output file, you should use pattern-container1.mks instead)
endif

ifeq ($(_ShouldIncludeUserMki),1)
  ifneq (,$(wildcard $(_p_post_gmucore))) # include it if exist
    include $(_p_post_gmucore)
  endif
endif


include $(gmp_p_mki_LoadPluginsPostcore)


ifneq (,$(gmp_up_CUSTOM_IT_POSTCORE_MKI)) # include it if required
  include $(gmp_up_CUSTOM_IT_POSTCORE_MKI)
endif

ifneq (,$(gmp_up_COMPILER_CFG_POSTCORE_TO_LOAD))
  include $(gmp_up_COMPILER_CFG_POSTCORE_TO_LOAD)
endif


.PHONY: __pattern1_inc_project_count
__pattern1_inc_project_count: _tmp_prj_mark = $(if $(call _IsOlderThanBuildStart_direct_sh,$(gmu_Gp_LINK_OUTPUT)),=,+)
__pattern1_inc_project_count: 
	@echo "$(_tmp_prj_mark) $(_PrjnameShowInList) $(_p_ThisMakefile)  $(gmu_Gf_LINK_OUTPUT)   $(if $(gmp_up_USER_OUTPUT_AFTER_LINK),$(gmp_up_USER_OUTPUT_AFTER_LINK),$(_NullUser1stTarget))" >> $(_p_BuiltListOutput)
	@echo "$(_tmp_prj_mark)$(_gmuBuildListIndent)$(_PrjnameShowInList) DONE: $(_p_ThisMakefile)  $(gmu_Gf_LINK_OUTPUT)   $(if $(gmp_up_USER_OUTPUT_AFTER_LINK),$(gmp_up_USER_OUTPUT_AFTER_LINK),$(_NullUser1stTarget))" >> $(_p_BuildingListOutput)
	@$(call _AppendLogCountCompile,$(_tmp_prj_mark))
#	@echo "<<< $(shell msleep 95000 ) [[$(gmu_Gp_LINK_OUTPUT)]] {{$(wildcard $(gmu_Gp_LINK_OUTPUT))}}  >>>" # temp
#[2007-06-15]GNUmake 3.81 . The above echo command with $(wildcard ) in it is for test. Very strangely, 
#If you build a project from scratch(or say, do an ``rm -fr gf'' before make), that $(wildcard )
#will return null meaning the file $(gmu_Gp_LINK_OUTPUT) not exist, however, $(gmu_Gp_LINK_OUTPUT)
#must have existed because only after $(gmu_Gp_LINK_OUTPUT)'s build success can we get here.
#For that reason, I cannot check filetime with _IsOlderThanBuildStart here.
# -- Is that a make bug??
#
#note: Number of + should be equal to l (i.e. one link means one updated project), if not do bug check.



_p_list_ALLFP_NonLoopSp := $(foreach v,$(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped),$($v_OutdirGMUTMP)/$(_f_AutoLinkListForParent))
	# ALLFP: Auto-LinkList For Parent. _NonLoopSp: of/from Non-looped subprjs.
_p_list_ALpjnmFP_NonLoopSp := $(foreach v,$(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped),$($v_OutdirGMUTMP)/$(_f_AutoLinkPjnmForParent))
	# ALpjnmFP: Auto-Linklist project name For Parent

	
ifneq (,$(gmu_I_AM_A_LINK_COMPONENT))

 ifeq (,$(gmu_DO_IGNORE_SUBPRJS))

  #NOTE: Notice the similarity of the two "big" rules below. When modify, keep in sync carefully.

  $(_p_AutoLinkListForParent): gmu_ut_Always
	@echo -n "" > $@ # clear the target file
	@echo "$(_gmuBuildListIndent)$(gmu_Gp_LINK_OUTPUT)" >> $@
	@$(if $(gmu_u_EXTRA_LINK_MERGE),echo "$(_gmuBuildListIndent)$(gmu_u_EXTRA_LINK_MERGE)" >> $@)
  ifneq (,$(gmu_IS_SUBPRJ_AUTO_LINK_MERGE))
#	@echo "@@@@@@@@@@@@@@@@ $(gmu_PRJ_NAME) [$(gmu_uv_list_SUBPRJ_LINK_FOR_PARENT)] {-$(gmu_uv_list_SUBPRJ_LOOPED) =$(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped)}" #(for debug)
	@$(if $(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped),cat $(_p_list_ALLFP_NonLoopSp) >> $@)
	@$(if $(gmu_uv_list_SUBPRJ_LOOPED),$(foreach v,$(gmu_uv_list_SUBPRJ_LOOPED),echo "$(_gmuBuildListIndent)!LINKREF:$($v_Prjname)" >> $@; ))
  endif

  $(_p_AutoLinkPjnmForParent): gmu_ut_Always
	@echo -n "" > $@ # clear the target file
	@echo "$(_gmuBuildListIndent)$(gmu_G_Final_PrjName)" >> $@
  ifneq (,$(gmu_IS_SUBPRJ_AUTO_LINK_MERGE))
#	@echo "%%%%%%%%%%%%%%%% $(gmu_PRJ_NAME) [$(gmu_uv_list_SUBPRJ_LINK_FOR_PARENT)] {-$(gmu_uv_list_SUBPRJ_LOOPED) =$(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped)}" #(for debug)
	@$(if $(gmu_uv_list_SUBPRJ_LNKFORPARNT_nonLooped),cat $(_p_list_ALpjnmFP_NonLoopSp) >> $@)
	@$(if $(gmu_uv_list_SUBPRJ_LOOPED),$(foreach v,$(gmu_uv_list_SUBPRJ_LOOPED),echo "$(_gmuBuildListIndent)!LINKREF:$($v_Prjname)" >> $@; ))
  endif

 else
  $(_p_AutoLinkListForParent): gmu_ut_Always
	@echo -n "" > $@

  $(_p_AutoLinkPjnmForParent): gmu_ut_Always
	@echo -n "" > $@
 endif # ifeq (,$(gmu_DO_IGNORE_SUBPRJS))

endif # ifneq (,$(gmu_I_AM_A_LINK_COMPONENT))


ifneq (,$(_gmp_up_USER_OUTPUT_AFTER_LINK_s))
$(gmp_up_USER_OUTPUT_AFTER_LINK): $(gmu_Gp_LINK_OUTPUT_ckt)
# By defining this rule, we always have $(gmp_up_USER_OUTPUT_AFTER_LINK) built after $(gmu_Gp_LINK_OUTPUT) .
# Note: We must use $(gmu_Gp_LINK_OUTPUT_ckt) as prerequisite instead of $(gmu_Gp_LINK_OUTPUT) .
endif

__pattern1_first_target: \
		$(gmp_USER_PRE_TARGETS) \
		$(if $(_gmp_up_USER_OUTPUT_AFTER_LINK_s),$(gmp_up_USER_OUTPUT_AFTER_LINK),$(gmu_Gp_LINK_OUTPUT_ckt)) \
		$(if $(gmu_I_AM_A_LINK_COMPONENT),$(_p_AutoLinkListForParent) $(_p_AutoLinkPjnmForParent)) \
		$(gmp_USER_POST_TARGETS) \
		$(if $(_gmu_cmdopt_NowPostProc),,__pattern1_inc_project_count)
	@echo "[DONE:] $(call _StripOutputRootPrefix,$(gmu_Gp_LINK_OUTPUT))"
	@$(_GmpShowDoneUserOutputAfterLink)
	@$(_Gmp1SharedFinishingCmds)


include $(gmu_DIR_GNUMAKEUNIPROC)/pattern1-common-postcore.mki

