# ==================== common build configurations ==========================
#	This partial-makefile is for those users who do not want to write similar
# compiler options(i.e. make variables for GnumakeUniproc.mki) again and again
# for every project he will build. Instead, the user can pre-define some make 
# variables(other than those required by GnumakeUniproc.mki) for this mki to 
# recognize, and this mki will in turn construct variables required by 
# GnumakeUniproc.mki -- that's the purpose of a "compiler-config.mki" .

#	This mki will finally output make-variable gmu_u_CC_CMD, gmu_u_CXX_CMD, 
# gmu_u_LINK_CMD etc, for use with GnumakeUniproc.mki .

# ---- make variables recognized by this mki -----
# gmp_bc_DEBUG: (bool) Build with debugging info (default is not defined)
# gmp_bc_UNICODE: (bool) Build with unicode string (default is not defined)
# gmp_bc_WIN64: (bool) AMD64, (not IA-64) (default is not defined)
# gmp_bc_CRT_STATIC_LIB:
#	null(default): use CRT as DLL(dynamic linking)
#	non-null:      use CRT as static library
# gmp_bc_IMAGE_TYPE: 
#	EXE_CUI(EXE)
#	EXE_GUI
#	LIB
#	DLL
#
#	* bc_ means build-config.

# The following gmp_COMPILER_VER_msvc value is recognize to construct different default 
# compiler options(if not set, default to vc60):
# * vc60 // Visual studio 98
# * vc70 // Visual studio .NET 2002
# * vc71 // Visual studio .NET 2003
# * vc80 // Visual studio .NET 2005

# [2007-01-15] Use gmp_up_WINDLL_MODULE_DEF_FROM_ROOT to assign what def(module definition) file to 
# use when linking the DLL. Note: gmp_up_WINDLL_MODULE_DEF_FROM_ROOT, as its name implies, 
# is relative to $(gmu_ud_SRC_ROOT) .

# ----- NOTE 1 -----
#	This mki requires msvc/compiler_const.mki to work.
#
# ----- NOTE 2 -----
#	If some bool type bc_XXX variables is not defined, the opposite meaning 
# is taken, e.g. if gmp_bc_UNICODE is not defined, then do a build with MBCS string.
#
# ----- NOTE 3 -----
#	After the user has included this mki in his makefile, those make-vars 
# requried for GnumakeUniproc.mki(e.g. gmu_u_CXX_CMD, gmu_u_LINK_CMD) may have been given
# some value, therefore do not use = to overwrite them , but using += to append 
# to them if you want to suppliment more compiler options or linker options.

# [2007-01-10] User-var: gmp_mswin_IMPLIB_SUFFIX
#	( Preferably, I'd like to set gmp_mswin_IMPLIB_SUFFIX=--imp )
# 	When building a DLL, this value(string) is added to the basename of the import-lib,
# however, it will not be added to DLL's basename. I think this decision is satisfactory
# for most people.
#	Implementation note: 
#	If a DLL project's $(gmu_uf_LINK_OUTPUT) is given extname .lib instead of .dll ,  
# $(gmp_mswin_IMPLIB_SUFFIX) will be added to $(gmu_DECO_SUFFIX_LINK_OUTPUT), so that
# the building project reports a correct link-output name for his parent project to link.
# In other word, if you just add, say, --imp to link command bypassing GMU's knowledge, 
# the output import-lib still can result in
# having that suffix, whereas the link-output-name reported by _gmu_ut_GetPrjAttr
# will not -- that causes the parent project fail to find this project's output.
#
# Special Note: Current implementation requires that 
# * User has done his gmu_DECO_SUFFIX_LINK_OUTPUT before this mki is included, otherwise
#	$(gmp_mswin_IMPLIB_SUFFIX) will not appear at the trail of the main filename, which will
#	cause the $(gmp_mswin_IMPLIB_SUFFIX) appending mechanism to fail.
# * User must not turn gmu_DECO_SUFFIX_LINK_OUTPUT into an immediate-expansion before here
#	(i.e. should not use := ), -- because gmu_uf_LINK_OUTPUT may not have been defined here.

gmp_up_COMPILER_CFG_PRECORE_TO_LOAD = $(call gmpf_GetCompilerCfgPrecorePath_std,precore)

include $(gmp_Gd_COMPILER_CONFIG_USED)/compiler_const.mki


include $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirDefaultCompilerCfg)/bc_common.mki


include $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirDefaultCompilerCfg)/bc_deco-mswin.mki

################################################################################

_MsvcPdbNameToGen = $(if $(gmp_msvc_WANT_WACKY_PDBNAME)$(call _IsStringEqual,$(gmp_bc_IMAGE_TYPE),LIB),$1.pdb,$(call gmuf_ChangeFilenameExt,$1,pdb))
	# Get the pdb name to generate:
	# If gmp_bc_IMAGE_TYPE==LIB, 
	# { 
	#	It is XXX.lib.pdb
	# }
	# else // gmp_bc_IMAGE_TYPE==EXE/DLL etc
	# {
	#   If gmp_msvc_WANT_WACKY_PDBNAME is null(the default), XXX.lib/XXX.dll/XXX.exe will have name XXX.pdb .
	#   If gmp_msvc_WANT_WACKY_PDBNAME is not null, XXX.lib/XXX.dll/XXX.exe will have .pdb appended to form the pdb name, e.g. aq_autotest.exe.pdb .
	# }

################################################################################

gmp_CFLAGS_CODE_GEN_preset += /GR# Enable RTTI
gmp_CFLAGS_CODE_GEN_preset += /EHsc# exception handling
ifneq (,$(gmp_bc_DEBUG))
  gmp_CFLAGS_CODE_GEN_preset += $(if $(isAboveVC7),/RTC1)# Detect 64-bit portability
endif
gmp_CFLAGS_CODE_GEN_preset += $(if $(isAboveVC8),/Wp64)# Detect 64-bit portability

gmp_CFLAGS_MACRO_DEFS_preset += $(if $(_gmp_IsNowExport),\
	$(patsubst %,/D"%=__declspec(dllexport)",$(gmp_u_list_DLL_EXPORT_SYM)))

gmp_CFLAGS_MACRO_DEFS_preset += $(patsubst %,/D"%=__declspec(dllimport)",$(gmp_u_list_DLL_IMPORT_SYM))

gmp_MSVC_Gp_VCx0_pdb = $(gmp_MSVC_Gp_LINK_OUTPUT_pdb)
	# [2011-04-23] Now, gmp_MSVC_Gp_VCx0_pdb is synonym of gmp_MSVC_Gp_LINK_OUTPUT_pdb
gmp_MSVC_Gp_VCx0_idb = $(call gmuf_ChangeFilenameExt,$(gmp_MSVC_Gp_VCx0_pdb),idb)
	# note: gmp_MSVC_Gp_VCx0_idb is defined for user convenience, in case user wants to copy .idb to other places.
	# The .idb is for incremental build.

gmp_CFLAGS_NON_CODE_GEN_preset += /Fd"$(gmp_MSVC_Gp_VCx0_pdb)"
	# /Fd tells where vc60.pdb, vc71.pdb, vc80.pdb etc is generated.
	# [2007-11-23] Today, I decided to name those VCx0.pdb specifically with prjname,
	# -- if not, you will not be able to place pdb files from several projects into the same 
	# directory for ease of debugging on other machines.

ifdef gmp_bc_WIN64
  gmp_CFLAGS_MACRO_DEFS_preset += #compiler will predefine _WIN64, and WIN64 seems not a reserved macro.
else
  gmp_CFLAGS_MACRO_DEFS_preset += /DWIN32 #[2006-12-01]VC6 compiler will predefine _WIN32 but not WIN32.
endif

#                                  ........ gmp_bc_UNICODE ........
ifneq (,$(gmp_bc_UNICODE))
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Unicode_defs)
else # MBCS 
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Mbcs_defs)
endif

#^^^^^^^^ gmp_bc_UNICODE ^^^^^^^########........ gmp_bc_DEBUG .........

ifneq (,$(gmp_bc_DEBUG)) 
  # Debug-build

  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Debug_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Debug_defs) 

  # gmp_bc_CRT_STATIC_LIB:
  gmp_CFLAGS_CODE_GEN_preset += $(if $(gmp_bc_CRT_STATIC_LIB),/MTd,/MDd)

else 
  # Release-build

  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Release_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Release_defs)

  # gmp_bc_CRT_STATIC_LIB:
  gmp_CFLAGS_CODE_GEN_preset += $(if $(gmp_bc_CRT_STATIC_LIB),/MT,/MD)

endif

#^^^^^^^ gmp_bc_DEBUG ^^^^^^^^^

#....... gmp_bc_IMAGE_TYPE ........

gmp_LINKFLAGS_preset += /nologo

ifdef gmp_bc_DEBUG
  gmp_LINKFLAGS_preset += /debug
  	# [2006-12-16] Later note: Since r771(GMU v0.95), I will explicitly assign pdb filename in /pdb: option.
  	# My naming rule is just adding .pdb to output DLL/EXE name, and I think it's better than 
  	# the default behavior of substituting .dll/.exe suffix with .pdb.
else
  ifneq (,$(strip $(gmp_msvc_WANT_RELEASE_PDB)))
    gmp_LINKFLAGS_preset += /debug
  endif
endif

_p_objliblist = $(gmu_Gd_Deco_PrjOutput)/objlist.lst
_cmd_write_objliblist = echo -e "$(subst $(_GmuSpace),\n,$1)" > $2
	# $1: what string to write. $2: what file to write to

_isReportLibOutput = $(call _IsStringEqual,$(call _GetExtName,$(gmu_uf_LINK_OUTPUT)),$(gmp_extn_LIB))
_StripImplibSuffix = $(if $(_isReportLibOutput),$(call _StripBasenameTail,$1,$(gmp_mswin_IMPLIB_SUFFIX)),$1)
	# Only strip implib-suffix if necessary("necessary" means $(_isReportLibOutput) is true)
	# You should use this function anywhere where referring an output file that should not have implib suffix appended.

# >>>>>>>>>>>>>> predefine some gmp_XXX commands 
	# The gmp_LINKFLAGS_XXX here may be used by the plugin user, e.g. when writing precompiled-header generating plugin.

####### DLL #######

  _msvc_LINK_OUTPUT_pdb_DLL = $(call _MsvcPdbNameToGen,$(gmp_Gp_DLL_OUTPUT))
  	  # note: Don't use $(gmu_Gp_LINK_OUTPUT) for $(gmp_Gp_DLL_OUTPUT), since the former may be XXX.lib besides XXX.dll !
  _tmp_Gp_list_LIB_OUTPUT = $(if $(_isReportLibOutput),$(gmp_Gp_LIB_OUTPUT)_tmp)
  gmp_LINKFLAGS_DLL = /dll $(if $(_tmp_Gp_list_LIB_OUTPUT),/implib:"$(_tmp_Gp_list_LIB_OUTPUT)") /PDB:"$(_msvc_LINK_OUTPUT_pdb_DLL)"

  _p_WINDLL_MODULE_DEF_FromCurDir = $(addprefix $(gmu_ud_SRC_ROOT)/,$(gmp_up_WINDLL_MODULE_DEF_FROM_ROOT))
  
  define _gmp_LINK_CMD_DLL
	@$(_gmpf_bcfShowLibrariesToLink)
	@$(call _cmd_write_objliblist,$(gmp_ALL_TO_LINK),$(_p_objliblist))
	$(gmu_exe_LINK) $(gmp_LINKFLAGS_DLL) $(_gmp_LINKFLAGS_final)  /out:"$(gmp_Gp_DLL_OUTPUT)" \
		$(if $(_p_WINDLL_MODULE_DEF_FromCurDir),/def:"$(_p_WINDLL_MODULE_DEF_FromCurDir)") @$(_p_objliblist)
	$(if $(_isReportLibOutput),$(_RenameBackImpLib))
  endef
	#NOTE: For this _gmp_LINK_CMD_DLL to work, gmu_Gp_LINK_OUTPUT can either be XXX.obj or XXX.dll .

  define _RenameBackImpLib
	@$(if $(gmu_DO_SHOW_LINK_CMD),echo "*** Renaming importlib $(call _StripOutputRootPrefix,$(_tmp_Gp_list_LIB_OUTPUT) to $(gmp_Gp_LIB_OUTPUT)) ...")
	@if [ ! -f $(_tmp_Gp_list_LIB_OUTPUT) ]; then echo "!GMP!Error: No import lib($(gmp_Gp_LIB_OUTPUT)) generated from the linker."; exit 1; \
	else $(_MV) $(_tmp_Gp_list_LIB_OUTPUT) $(gmp_Gp_LIB_OUTPUT) || (echo "!GMP!Error: Cannot rename temporary import-lib to its final form."; exit 1); \
	fi;
  endef

####### EXE_CUI #######
#gmp_LINKFLAGS_preset += /subsystem:console
define _gmp_LINK_CMD_EXE_CUI
	@$(_gmpf_bcfShowLibrariesToLink)
	@$(call _cmd_write_objliblist,$(gmp_ALL_TO_LINK),$(_p_objliblist))
	$(gmu_exe_LINK) /subsystem:console /out:"$@" $(gmp_LINKFLAGS_FOR_ANY_EXE) $(_gmp_LINKFLAGS_final) @$(_p_objliblist)
endef
####### EXE_GUI #######
#gmp_LINKFLAGS_preset += /subsystem:windows
define _gmp_LINK_CMD_EXE_GUI
	@$(_gmpf_bcfShowLibrariesToLink)
	@$(call _cmd_write_objliblist,$(gmp_ALL_TO_LINK),$(_p_objliblist))
	$(gmu_exe_LINK) /subsystem:windows /out:"$@" $(gmp_LINKFLAGS_FOR_ANY_EXE) $(_gmp_LINKFLAGS_final) @$(_p_objliblist)
endef
###### (EXE ALL) ######
_msvc_LINK_OUTPUT_pdb_EXE += $(call _MsvcPdbNameToGen,$(gmu_Gp_LINK_OUTPUT))
gmp_LINKFLAGS_FOR_ANY_EXE += /PDB:"$(_msvc_LINK_OUTPUT_pdb_EXE)"

# <<<<<<<<<<<<<< predefine some gmp_XXX commands 


ifeq '$(gmp_bc_IMAGE_TYPE)' 'LIB'

  gmu_I_AM_A_LINK_COMPONENT = 1 #[2006-11-02]
  gmu_IS_SUBPRJ_AUTO_LINK_MERGE = 1 #[2006-12-11]

  gmp_Gp_LIB_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmp_CFLAGS_MACRO_DEFS_preset += /D_LIB

  define gmu_u_LINK_CMD
	@echo "$(gmp_ALL_TO_LINK_FOR_LIB)" > $(gmu_Gd_PRJ_GMUTMP)/_ObjsForThisLib.gmp.lst
	@$(call _cmd_write_objliblist,$(gmp_ALL_TO_LINK_FOR_LIB),$(_p_objliblist))
	$(gmu_exe_LIB) /nologo /out:"$@" @$(_p_objliblist)
  endef

  gmp_MSVC_Gp_LINK_OUTPUT_pdb = $(call _MsvcPdbNameToGen,$(gmu_Gp_LINK_OUTPUT))
  gmp_MSVC_Gp_LINK_OUTPUT_pdb_LIB = $(gmp_MSVC_Gp_LINK_OUTPUT_pdb)
	# Note: gmp_MSVC_Gp_LINK_OUTPUT_pdb_LIB/DLL/EXE will be used by sdbi.msvc.mki.
else

  # For all image types other than static library, add /LIBPATH:xxx link params for extra library path
  gmp_LINKFLAGS_preset += $(addprefix /LIBPATH:,$(gmp_ud_list_EXTRALIB))

ifeq '$(gmp_bc_IMAGE_TYPE)' 'DLL'

  gmu_I_AM_A_LINK_COMPONENT = 1

  gmp_NOW_EXPORT = 1

  _p_BasenameOutput = $(basename $(gmu_Gp_LINK_OUTPUT))
  gmp_Gp_LIB_OUTPUT = $(if $(_isReportLibOutput),$(_p_BasenameOutput).$(gmp_extn_LIB))
  	# set it only when link output use LIB as ext-name.
  gmp_Gp_DLL_OUTPUT = $(call _StripImplibSuffix,$(_p_BasenameOutput)).$(gmp_extn_DLL)

  gmp_MSVC_Gp_LINK_OUTPUT_pdb = $(_msvc_LINK_OUTPUT_pdb_DLL)
  gmp_MSVC_Gp_LINK_OUTPUT_pdb_DLL = $(gmp_MSVC_Gp_LINK_OUTPUT_pdb)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_DLL)

else
ifneq (,$(findstring $(gmp_bc_IMAGE_TYPE),EXE_CUI EXE))

  gmp_Gp_EXE_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmp_MSVC_Gp_LINK_OUTPUT_pdb = $(_msvc_LINK_OUTPUT_pdb_EXE)
  gmp_MSVC_Gp_LINK_OUTPUT_pdb_EXE = $(gmp_MSVC_Gp_LINK_OUTPUT_pdb)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_EXE_CUI)

else
ifeq '$(gmp_bc_IMAGE_TYPE)' 'EXE_GUI'

  gmp_Gp_EXE_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmp_MSVC_Gp_LINK_OUTPUT_pdb = $(_msvc_LINK_OUTPUT_pdb_EXE)
  gmp_MSVC_Gp_LINK_OUTPUT_pdb_EXE = $(gmp_MSVC_Gp_LINK_OUTPUT_pdb)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_EXE_GUI)

endif # EXE_GUI
endif # EXE_CUI or EXE
endif # DLL
endif # LIB

#^^^^^^^^ gmp_bc_IMAGE_TYPE ^^^^^^^^

# ................................................

gmp_FLAGS_INCLUDES += $(addprefix -I,$(gmu_ud_list_PRJ_HEADER)) # append include-directories 

_vc60_compilee_path_tweak = $(if $(gmu_DO_PASS_FULLPATH_TO_COMPILER),$(subst /,\\,$1),$1)

gmu_u_CC_CMD = $(gmu_exe_CC) /c $(_gmp_CFLAGS_final) $(gmp_FLAGS_INCLUDES) /Fo"$@" \
	$(if $(_msvc_IsUsing_vc60),$(call _vc60_compilee_path_tweak,$(<cfinal_to_compiler)),$(<cfinal_to_compiler))
gmu_u_CXX_CMD = $(gmu_u_CC_CMD)

# ..... syslib categories, user should append some into gmp_bc_SYSLIBS (gmp_bc_SYSLIBS += gmp_bc_syslib_XXX).

gmp_bc_SYSLIBS += $(call gmpf_MakeUpSysLibsToLink,\
	kernel32 user32 gdi32 comdlg32 advapi32 shell32 ShLwApi uuid \
	winspool ole32 oleaut32 odbc32 odbccp32 \
	ws2_32 NetAPI32 \
	RpcRT4 \
	SetupAPI \
	RASAPI32 \
	)
	#	[2006-11-30] Yes, don't use = here, because pattern1-inc-custom-it.mki 
	# may add some more libs to gmp_bc_SYSLIBS which precedes this statement.

gmp_bc_syslib_GUI = user32 gdi32 comdlg32
gmp_bc_syslib_WIN_SYS = winspool shell32 advapi32 ole32 oleaut32
gmp_bc_syslib_DATABASE = odbc32 odbccp32
gmp_bc_syslib_NETWORK = ws2_32

# x64 SDK does not have the following libs:
# RichEd20.lib (VS2005 VS2008)

