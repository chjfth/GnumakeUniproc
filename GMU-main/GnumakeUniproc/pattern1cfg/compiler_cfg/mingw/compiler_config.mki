# ==================== common build configurations ==========================
# See notes of the same-name file from "msvc/compiler_config.mki" 

gmp_up_COMPILER_CFG_PRECORE_TO_LOAD = $(call gmpf_GetCompilerCfgPrecorePath_std,precore)

include $(gmp_Gd_COMPILER_CONFIG_USED)/compiler_const.mki


include $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirDefaultCompilerCfg)/bc_common.mki


include $(gmu_DIR_GNUMAKEUNIPROC)/$(_dirDefaultCompilerCfg)/bc_deco-mswin.mki


ifneq (,$(gmp_GCC_PREFIX))
ifneq (,$(gmp_DECO_PRJ_NAME))
  gmu_DECO_PREFIX_PRJ_NAME += $(gmp_GCC_PREFIX)
    # 	NOTE: If a gcc user would like to build his app/lib crossly as well as 
    # natively in the same gmu_ud_OUTPUT_ROOT, he should ensure gmp_DECO_PRJ_NAME 
    # is defined, otherwise, the different builds(e.g. output from i386-linux-gcc 
    # and arm-linux-gcc) will mix into the same project output dir.
endif
	#[2006-07-10] I'll however not prepend $(gmp_GCC_PREFIX) to output image name,
	#which is always weird.
endif

################################################################################

gmp_CFLAGS_MACRO_DEFS_preset += $(if $(gmp_NOW_EXPORT),\
	$(patsubst %,-D"%=__declspec(dllexport)",$(gmp_u_list_DLL_EXPORT_SYM)))

gmp_CFLAGS_MACRO_DEFS_preset += $(patsubst %,-D"%=__declspec(dllimport)",$(gmp_u_list_DLL_IMPORT_SYM))

#                                  ........ gmp_bc_UNICODE ........
ifdef gmp_bc_UNICODE
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Unicode_defs)
else # MBCS 
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_chr_Mbcs_defs)
endif

#^^^^^^^^ gmp_bc_UNICODE ^^^^^^^########........ gmp_bc_DEBUG .........

ifdef gmp_bc_DEBUG
  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Debug_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Debug_defs) 
else # for so-called release-build
  gmp_CFLAGS_CODE_GEN_preset += $(cfc_for_Release_codegen)
  gmp_CFLAGS_MACRO_DEFS_preset += $(cfc_for_Release_defs)
endif

#^^^^^^^ gmp_bc_DEBUG ^^^^^^^^^########......... gmp_bc_CRT ...........

ifeq '$(gmp_bc_CRT)' 'CRT_SINGLE_THREADED'
  $(error !CRT_SINGLE_THREADED not supported for MinGW)
#  gmp_CFLAGS_CODE_GEN += $(if $(gmp_bc_DEBUG),/MLd,/ML)
#  SUFFIX_CRT = CrtML
else
ifeq '$(gmp_bc_CRT)' 'CRT_MULTI_THREADED_LIB'
  $(error !CRT_MULTI_THREADED_LIB not supported for MinGW)
#  gmp_CFLAGS_CODE_GEN += $(if $(gmp_bc_DEBUG),/MTd,/MT)
#  SUFFIX_CRT = CrtMT
else
  ifdef gmp_bc_CRT
  ifneq '$(gmp_bc_CRT)' 'CRT_MULTI_THREADED_DLL'
    $(error !Invalid `gmp_bc_CRT' definition.)
  endif
  endif

#  gmp_CFLAGS_CODE_GEN += $(if $(gmp_bc_DEBUG),/MDd,/MD) # MinGW does not want this (He himself has predefined __MSVCRT__)

endif # CRT_MULTI_THREADED_LIB
endif # CRT_SINGLE_THREADED

#^^^^^^^^^  ^^^^^^^^########....... gmp_bc_IMAGE_TYPE ........


ifdef gmp_bc_DEBUG
  gmp_LINKFLAGS_preset += -g
endif


_isReportLibOutput = $(call _IsStringEqual,$(call _GetExtName,$(gmu_uf_LINK_OUTPUT)),$(gmp_extn_LIB))
_StripImplibSuffix = $(if $(_isReportLibOutput),$(call _StripBasenameTail,$1,$(gmp_mswin_IMPLIB_SUFFIX)),$1)
	# Only strip implib-suffix is necessary(necessary means $(_isReportLibOutput) is true)
	# You should use this function anywhere where referring an output file that should not have implib suffix appended.

# >>>>>>>>>>>>>> predefine some gmp_XXX commands 

####### DLL #######

  _tmp_Gp_list_LIB_OUTPUT = $(gmp_Gp_list_LIB_OUTPUT)_tmp
  gmp_LINKFLAGS_DLL = -shared -Wl,--out-implib,$(_tmp_Gp_list_LIB_OUTPUT)
  define _gmp_LINK_CMD_DLL
	@$(bcfShowLibrariesToLink)
	$(gmu_exe_LINK) $(gmp_LINKFLAGS_DLL) $(_gmp_LINKFLAGS_final) -o "$(gmp_Gp_list_DLL_OUTPUT)" $(gmp_ALL_TO_LINK)
	$(if $(_isReportLibOutput),$(_RenameBackImpLib))
  endef
	#NOTE: For this _gmp_LINK_CMD_DLL to work, gmu_Gp_LINK_OUTPUT can either be XXX.a or XXX.dll .

  define _RenameBackImpLib
	@$(if $(gmu_DO_SHOW_LINK_CMD),echo "*** Renaming importlib $(call _StripOutputRootPrefix,$(_tmp_Gp_list_LIB_OUTPUT) to $(gmp_Gp_list_LIB_OUTPUT)) ...")
	@if [ ! -f $(_tmp_Gp_list_LIB_OUTPUT) ]; then echo "!GMP!Error: No import lib($(gmp_Gp_list_LIB_OUTPUT)) generated from the linker."; exit 1; \
	else $(_MV) $(_tmp_Gp_list_LIB_OUTPUT) $(gmp_Gp_list_LIB_OUTPUT) || (echo "!GMP!Error: Cannot rename temporary import-lib to its final form."; exit 1); \
	fi;
  endef

####### EXE_CUI #######
#gmp_LINKFLAGS += -mconsole
define _gmp_LINK_CMD_EXE_CUI
	@$(bcfShowLibrariesToLink)
	$(gmu_exe_LINK) -mconsole -o "$@" $(_gmp_LINKFLAGS_final) $(gmp_ALL_TO_LINK)
endef
####### EXE_GUI #######
#gmp_LINKFLAGS += -mwindows
define _gmp_LINK_CMD_EXE_GUI
	@$(bcfShowLibrariesToLink)
	$(gmu_exe_LINK) -mwindows -o "$@" $(_gmp_LINKFLAGS_final) $(gmp_ALL_TO_LINK)
endef

# <<<<<<<<<<<<<< predefine some gmp_XXX commands 

ifeq '$(gmp_bc_IMAGE_TYPE)' 'LIB'

  gmu_I_AM_A_LINK_COMPONENT = 1 #[2006-11-02]
  gmu_IS_SUBPRJ_AUTO_LINK_MERGE = 1 #[2006-12-11]
  
  gmp_Gp_list_LIB_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmp_CFLAGS_MACRO_DEFS_preset += -D_LIB

  define gmu_u_LINK_CMD
	@echo "$(gmp_ALL_TO_LINK_FOR_LIB)" > $(gmu_Gd_PRJ_GMUTMP)/_ObjsForThisLib.gmp.lst
	$(gmu_exe_LIB) -crs "$@" $(gmp_ALL_TO_LINK_FOR_LIB)
  endef

else

  # For all image types other than static library, add -L xxx link params for extra library path
  gmp_LINKFLAGS_preset += $(addprefix -L ,$(gmp_ud_list_EXTRALIB))

ifeq '$(gmp_bc_IMAGE_TYPE)' 'DLL'

  gmu_I_AM_A_LINK_COMPONENT = 1

  _p_BasenameOutput = $(basename $(gmu_Gp_LINK_OUTPUT))
  gmp_Gp_list_LIB_OUTPUT = $(_p_BasenameOutput).$(gmp_extn_LIB)
  gmp_Gp_list_DLL_OUTPUT = $(call _StripImplibSuffix,$(_p_BasenameOutput)).$(gmp_extn_DLL)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_DLL)

else
ifneq (,$(findstring $(gmp_bc_IMAGE_TYPE),EXE_CUI EXE))

  gmp_Gp_list_EXE_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_EXE_CUI)

else
ifeq '$(gmp_bc_IMAGE_TYPE)' 'EXE_GUI'

  gmp_Gp_list_EXE_OUTPUT = $(gmu_Gp_LINK_OUTPUT)

  gmu_u_LINK_CMD = $(_gmp_LINK_CMD_EXE_GUI)

endif # EXE_GUI
endif # EXE_CUI
endif # DLL
endif # LIB

#^^^^^^^^ gmp_bc_IMAGE_TYPE ^^^^^^^^

# ................................................

gmp_FLAGS_INCLUDES += $(addprefix -I,$(gmu_ud_list_PRJ_HEADER)) # append include-directories 

gmu_u_CC_CMD =  $(gmu_exe_CC)  -c $(_gmp_CFLAGS_final) $(gmp_FLAGS_INCLUDES) -o "$@" $<
gmu_u_CXX_CMD = $(gmu_exe_CXX) -c $(_gmp_CFLAGS_final) $(gmp_FLAGS_INCLUDES) -o "$@" $<

# ..... syslib categories, user should append some into gmp_bc_SYSLIBS (gmp_bc_SYSLIBS += gmp_bc_syslib_XXX).

gmp_bc_SYSLIBS += $(call gmpf_MakeUpSysLibsToLink,kernel32 uuid)

gmp_bc_syslib_GUI = user32 gdi32 comdlg32
gmp_bc_syslib_WIN_SYS = winspool shell32 advapi32 ole32 oleaut32
gmp_bc_syslib_DATABASE = odbc32 odbccp32
gmp_bc_syslib_NETWORK = wsock32


