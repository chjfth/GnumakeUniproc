ifndef _Gmu_CommonFunctions_included # avoid being include more than once
_Gmu_CommonFunctions_included :=1


# [2009-12-21] Include GMSL(GNU Make Standard Library) from http://gmsl.sourceforge.net
include $(patsubst %CommonFunctions.mki,%../gmsl/gmsl,$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))


gmuf_IsNull = $(if $1,,1)
gmuf_IsNullAfterStrip = $(if $(strip $1),,1)

gmuf_IsAllVarsNonNull = $(if $(strip $1),$(if $(strip $(foreach v,$1,$(if $(strip $($v)),,1))),,1))
	# $1: list of make-vars, separated by spaces.
	# Check if all make-vars in $1 are all non-null. (Pure spaces and tabs are considered null)
	# Return 1 if yes, return null if no.
	# If $1 is null, return null.

_IsStringEqual = $(if $(subst $1,,$2)$(subst $2,,$1),,1)
	# If two strings are equal, returns 1, else returns null value.
_IsStringNotEqual = $(if $(subst $1,,$2)$(subst $2,,$1),1,)
	# If two strings are equal, returns 1, else returns null value.
gmuf_IsStringEqual = $(_IsStringEqual)
gmuf_IsStringNotEqual = $(_IsStringNotEqual)

gmuf_Not = $(if $1,,1)

_IsAllWordsSame = $(if $(strip $(patsubst $(word 1,$1),,$1)),,1)
	# Don't use $(subst ) here, otherwise, "$(call _IsAllWordsSame,2 22)" will return true.

_aCap:=A
_bCap:=B
_cCap:=C
_dCap:=D
_eCap:=E
_fCap:=F
_gCap:=G
_hCap:=H
_iCap:=I
_jCap:=J
_kCap:=K
_lCap:=L
_mCap:=M
_nCap:=N
_oCap:=O
_pCap:=P
_qCap:=Q
_rCap:=R
_sCap:=S
_tCap:=T
_uCap:=U
_vCap:=V
_wCap:=W
_xCap:=X
_yCap:=Y
_zCap:=Z

gmuf_ToCapital = $(strip $(eval tmp:=$1) $(foreach v,a b c d e f g h i j k l m n o p q r s t u v w x y z,\
	$(eval tmp:=$(subst $v,$(_$(v)Cap),$(tmp)))) $(tmp))
	# Note: Original leading and trailing spaces will be stripped.
gmuf_IsStrIEqual = $(call gmuf_IsStringEqual,$(call gmuf_ToCapital,$1),$(call gmuf_ToCapital,$2))
	# Check if $1 and $2 are equal, case insensitive,

gmuf_CountInc = $(1) @
gmuf_CountDec = $(filter-out @@,$(join $1,@))
	# Thanks to GMSL's int_plus & int_subtract function.


#### >>>>>>> GNUmake version checking (We require at least GNUmake 3.80)

_gmu_isGnumake380 := $(call _IsStringEqual,$(MAKE_VERSION),3.80)
_gmu_isGnumake381 := $(call _IsStringEqual,$(MAKE_VERSION),3.81)
_gmu_isGnumake382 := $(call _IsStringEqual,$(MAKE_VERSION),3.82)

_gmu_isAboveGnumake380 := $(_gmu_isGnumake382)$(_gmu_isGnumake381)$(_gmu_isGnumake380)
_gmu_isAboveGnumake381 := $(_gmu_isGnumake382)$(_gmu_isGnumake381)
_gmu_isAboveGnumake382 := $(_gmu_isGnumake382)

#### <<<<<<< GNUmake version checking

gmu_isFirstLoad = $(if $(MAKE_RESTARTS),,1)
	# Note: This function is only available from GNUmake 3.81. Prior GNU make don't have MAKE_RESTARTS.

#################### Common Shell Commands #######################
# GMU/GMP developers should use these to achives best portability effect on Windows and Linux.
ifeq (,$(strip $(MD_))) # make dir
  MD_ = mkdir -p 
endif
ifeq (,$(strip $(RM_))) # remove any files and dirs 
  RM_ = rm -fr 
endif
ifeq (,$(strip $(MV_))) # move or rename
  MV_ = mv
endif
ifeq (,$(strip $(CP_))) # copy
  CP_ = cp
endif

CP_preserve_time := $(CP_) --preserve=timestamp
	# Note: When using $(CP_), it's suggested most of the time to use --preserve option.
	# --preserve makes the destination file's modification time the same as source file.

################# Common user-defined functions for GNU make ###################

_gmu_true = 1
_gmu_false = 

#[2006-11-10] Special for _MakeSubPrjs.mk
_GmuSharp = \#
_GmuNull =
_GmuBs = \\
_GmuComma = ,
_GmuLB = (
_GmuRB = )
_GmuSpace =  $(_GmuNull) $(_GmuNull)
_GmuSpace2 = $(_GmuNull)  $(_GmuNull)
_GmuSpace3 = $(_GmuNull)   $(_GmuNull)
_GmuSpace4 = $(_GmuNull)     $(_GmuNull)

_gmu_bs2fs = $(subst \,/,$1)

_EchoVarValue = $(if $($1),echo $1=$($1),echo $1 [Null])
_EchoVarValue2 = echo $1 = "$(call _TrShcmd4echo,[$($1)])"
_ListVarValue = $(if $($1),echo -e $1="$(call _TrShcmd4echo,$(foreach Ele,$($1),\n\t$(Ele)))",echo $1 [NULL])
_FindStrings = $(strip $(foreach v,$1,$(findstring $v,$2)))
	# Find appearances of $1 in $2, return space separated words found in $2.
	# Example: $(call _FindStrings,a b c,b c d)
	#   returns: b c
gmuf_FindStrings = $(_FindStrings)

gmuf_IsSubString = $(if $(call _IsStringEqual,$(subst $1,,$2),$2),,1)
	# If $1 is a substring of $2, return 1, otherwise null.
	# Example:
	# 	$(call gmuf_IsSubString,abc,abcd)	=> true
	# 	$(call gmuf_IsSubString,abc,abc)	=> true
	# 	$(call gmuf_IsSubString,abcd,abc)	=> false
	# 	$(call gmuf_IsSubString,ab,xyz)	=> false
	# If $1 is null, return null.

_gmuf_addc = $(if $(call _IsStringEqual,$(words $1),1),$1,$(word 1,$1)$2$(call _gmuf_addc,$(wordlist 2,$(words $1),$1),$2))
gmuf_ConcateWithChars = $(if $(strip $1),$(call _gmuf_addc,$1,$2))
	# $1: source containing strings separated by space or tabs
	# $2: Chars in between
	# Example:
	#	$(call gmuf_ConcateWithChars,11 22	33,|)
	# Output:
	#	11|22|33


_MkdirIfNotExist = $(if $(wildcard $1),,$(MD_) $1)
gmuf_MkdirIfNotExist = $(_MkdirIfNotExist)
	# This can only be used in recipe. For mkdir in make statement, use gmuf_MkdirIfNotExist_sh.
_ClearFile = echo -n "" > $(1)
gmuf_ClearFile = $(_ClearFile)

gmuf_MkdirIfNotExist_sh = $(shell if [ ! -d "$1" ];then mkdir -p "$1"; fi )

gmuf_DeleteFile_sh_wc = $(shell $(RM_) $1 1>&2 ; if [ "$$?" = 0 ];then echo 1; fi)
	# Delete a file or some files, assigned in $1.
	# Return 1 on success; return null on failure.
	# _wc implies you can use wildcard, so 
	#	$(RM_) $1 
	# should not be written as
	#	$(RM_) "$1"

gmuf_dir_nts = $(patsubst %/,%,$(dir $1))
	# similar to $(dir ), but without trailing slash.

gmuf_GetExtName = $(patsubst .%,%,$(suffix $1))
	# What the internal $(suffix) function returns has a leading dot, we reject the dot here.
_GetExtName = $(gmuf_GetExtName)

gmuf_AddToBasename_path = $(dir $1)$2$(basename $(notdir $1))$3$(suffix $1)
	#gmuf_AddToBasename_path: $1 is filepath, $2 is prefix and $3 is suffix
_AddToBasename_path = $(gmuf_AddToBasename_path)# obsolete

gmuf_AddToBasename_fname = $2$(basename $(notdir $1))$3$(suffix $1)
	#gmuf_AddToBasename_fname: The only difference to gmuf_AddToBasename_path: no $(dir $1) ahead.
	#Therefore, only use gmuf_AddToBasename_fname when $1 is only a filename(no path prefix).
_AddToBasename_fname = $(gmuf_AddToBasename_fname)# obsolete

gmuf_ChangeFilenameExt = $(basename $1).$2
_ChangeFilenameExt = $(gmuf_ChangeFilenameExt)# obsolete

gmuf_IsPrefixWith = $(if $1,$(if $(patsubst $2%,,$1),,1))
	# Check whether $1 is prefixed with $2. Return 1 for true; return null for false.
	# $(call gmuf_IsPrefixWith,sdt,sdt)		true
	# $(call gmuf_IsPrefixWith,sdt250,sdt)	true
	# $(call gmuf_IsPrefixWith,sdt,sdtXX)	false
	# $(call gmuf_IsPrefixWith,,sdt)		false
gmuf_IsSuffixWith = $(if $1,$(if $(patsubst %$2,,$1),,1))
	# Check whether $1 is suffixed with $2. Return 1 for true; return null for false.

_addprefixsuffix = $(addprefix $1,$(addsuffix $3,$2))
	# $1: prefix to add, $2: your data to process, $3 suffix to add.

_StripBasenameTail = $(if $(patsubst %$2,,$(basename $1)),$1,$(patsubst %$2,%,$(basename $1))$(if $(suffix $1),.)$(call _GetExtName,$1))
	# $1: pathname, $2: tail-string to strip from basename
	# If $1 does not end with that tail string, $1 is returned intact.
	# Example:
	#	$(call _StripBasenameTail,/dir/mydll--imp.lib,--imp) = /dir/mydll.lib
	#	$(call _StripBasenameTail,/dir/mydll--imp,--imp)     = /dir/mydll
	#	$(call _StripBasenameTail,/dir/mydll.lib,--imp)      = /dir/mydll.lib
	#	$(call _StripBasenameTail,/dir/mydll.lib,)           = /dir/mydll.lib

gmuf_ExecuteSimpleShcmd = $(strip $(shell $1 1>&2; echo $$?))
	# $1 is a shell command.
	# Returns exit code of the command $1

_IsFileExist_sh = $(shell if [ -f "$1" ] ;then echo -n '1';fi)
gmuf_IsFileExist_sh = $(_IsFileExist_sh)
gmuf_IsFileNotExist_sh = $(if $(call _IsFileExist_sh,$1),,1)

gmuf_RemoveFileIfExist = $(if $(call gmuf_IsFileExist_sh,$1),$(RM_) -fr "$1")

gmuf_IsDirExist_sh = $(shell if [ -d "$1" ] ;then echo -n '1';fi)

gmuf_Copy1File_sh = $(shell if $(CP_) --force --preserve "$1" "$2" 1>&2; then echo 1; fi)

_GetFileContent_sh = $(shell if [ -f $1 ]; then cat $1; else echo "!GMU!AssertFail: $1 not exist." 1>&2 ;fi)
gmuf_GetFileContent_sh = $(_GetFileContent_sh)

gmuf_WriteContentToFile = $(shell \
	echo "$(call _TrShcmd4echo,$1)" 2>$2 1>&2; \
	if [ $$? = 0 ]; then echo 1; fi \
	)
	# $1: the content
	# $2: the filepath
	# Return 1 on success, return null on fail.
	#
	# Note: Directory of $2 should have been created.
	#
	# Limitation: Content can only be one line.
	#
	# Hint: 2>$2 must be put ahead of 1>&2 , otherwise, $1 will be dumped to console.


_IsP1OlderThanP2_direct_sh = $(shell (if [ ! -f $1 ] || [ $1 -ot $2 ];then echo -n '1';fi))
	# User should ensure exist. (`sh' means usING shell's file time compare function.)
	# Use the *_direct_sh function to avoid the GNU make's $(wildcard ) result caching problem. See my
	# mailing list thread http://www.nabble.com/HELP!-$(wildcard-)-function-failed-very-strangely-td12964178.html and Paul Smith's answer.

_IsP1OlderThanP2 = $(if $(wildcard $1),$(shell (if [ $1 -ot $2 ];then echo -n '1';fi)),1)
	# If file $1 not exist or older than $2, 1 is returned, else null value is returned.
	# If $2 does not exist, result is undetermined(fortunately, up to 2006-07-14, $2 can only be _MainPrjBuildStart.gmu.ckt, which is unlikely absent).

_GetAbsDirRelaToCurdir = $(shell ( cd $1; CmdRet=$$?; if [ $$CmdRet = 0 ];then pwd; else echo __GMU_cd_ERROR; fi; ))
	# $1, the dir to cd to. Returns the new dir abs-path if success, cd_ERROR if fail.
gmuf_GetAbsDirRelaToCurdir = $(_GetAbsDirRelaToCurdir)

_GetAbsPathRelaToCurdir = $(call _GetAbsDirRelaToCurdir,$(dir $1))/$(notdir $1)
gmuf_GetAbsPathRelaToCurdir = $(_GetAbsPathRelaToCurdir)

_GetAbsDir = $(shell ( cd $1 && cd $2; CmdRet=$$?; if [ $$CmdRet = 0 ]; then pwd; else echo __GMU_cd_ERROR; fi; ))
	#[2006-11-09] $1: starting dir, $2: the dir relative to $1
gmuf_GetAbsDir = $(_GetAbsDir)

gmuf_ConcatePath = $(gmuf_GetAbsPathByRela_so)
_gmuf_GetAbsPathByRela_so = $(shell dirGo=$(strip $1); dirRel=$(strip $2); \
	while [ $${dirRel$(_GmuSharp)../} != $${dirRel} ]; do dirRel=$${dirRel$(_GmuSharp)../}; dirGo=$${dirGo%/*}; done; \
	if [ "$${dirRel}" = ".." ]; then echo "$${dirGo%/*}"; \
	else \
		if [ "$${dirRel$(_GmuSharp)?:/}" = "$${dirRel}" ] && [ "$${dirRel$(_GmuSharp)/}" = "$${dirRel}" ]; then \
			echo "$${dirGo}/$${dirRel}"; \
		else \
			echo "$${dirRel}"; \
		fi; \
	fi )
gmuf_GetAbsPathByRela_so = $(if $(call _IsStringEqual,$2,.)$(call gmuf_IsNull,$2),$1,$(call _gmuf_GetAbsPathByRela_so,$1,$2))
	# $1: Starting absolute dir
	# $2: Relative dir or absolute dir
	# 'so' means string operation
	#
	# If $2 is an absolute dir(start with ?:/ or / ), just return $2.
	# If $2 is a relative dir, calculate absolute dir with $1 as starting position.
	#
	# This is suitable for directory and filepath(dir+filename)
	# LIMITATION: Don't let $2 trace back to root dir, otherwise, the behavior is wrong.
	#   E.G. $(call gmuf_GetAbsPathByRela_so,/dir1/dir2,../..) will produce null string.
	#
	# Note: Currently, gmuf_GetAbsPathByRela_so misbehaves when the relative path has ./ in it,
	# e.g. 
	#	./dir1/abc.txt
	#	dir1/./abc.txt

gmuf_GetAbsPathByRela_soc = $(call gmuf_GetAbsPathByRela_so,$(CURDIR),$1)
	# $1: a (relative) path relative to curdir.
	# Similar to gmuf_GetAbsPathByRela_so, but 'soc' means string operation from curdir. 
	#
	# TODO: optimize with $(realpath later)

_gmuf_IsWordInSet_rw = $(foreach w,$2,$(if $(call _IsStringEqual,$w,$1),$1))
	# Check whether word $1 is word-set $2. Return $1(may be duplicate).

gmuf_IsWordInSet_rw = $(firstword $(call _gmuf_IsWordInSet_rw,$1,$2))
	# Check whether word $1 is word-set $2. Return $1 if yes, null if no.
	# _rw implies: return word $1.
	#
	# This is not the same as $(findstring ) which does not operate on word boundary
	#	$(findstring ab,123 abc) # returns ab

gmuf_IsWordInSet = $(if $(call gmuf_IsWordInSet_rw,$1,$2),1)
	# Check whether word $1 is word-set $2. Return 1 if yes, null if no.

gmuf_IsWordInWords = $(gmuf_IsWordInSet)

gmuf_IntersectWords = $(foreach w,$1,$(call gmuf_IsWordInSet_rw,$w,$2))
	# Find intersection of words provided in $1 and $2
	#	$(call gmuf_IntersectWords,11 22 33,22 33 44)
	# returns
	#	22 33

gmuf_GetVarAssertExist = $(if $(strip $($1)),$($1),$(error Make-var '$1' does not contain a value$(if $2, required by $2.) $3))
	# For make-var named $1, return its value if it is non-null, 
	# otherwise assert error.
	# $2: optional, telling this value is required by whom.
	# $3: optional, arbitrary descriptive text, telling the user what this value should be etc.


#======== Something not so "common" below ========

_isNowGmuGetPrjAttr = $(call _IsStringEqual,$(MAKECMDGOALS),_gmu_ut_GetPrjAttr)
_isNowNotGmuGetPrjAttr = $(if $(_isNowGmuGetPrjAttr),,1)

_IsOlderThanBuildStart = $(call _IsP1OlderThanP2,$1,$(gmu_p_BuildStartCkt))

_IsOlderThanBuildStart_direct_sh = $(call _IsP1OlderThanP2_direct_sh,$1,$(gmu_p_BuildStartCkt))

gmuf_IsOlderThanBuildStart_sh = $(call _IsOlderThanBuildStart_direct_sh,$1)

_IsFileContentEqualTo = $(call _IsStringEqual,$2,$(shell cat "$1"))
	# $1: the filename(pathname), $2: the string to compare to; returns 1 if equal, otherwise null.

gmuf_StripCurDirPrefix = $(patsubst $(CURDIR)/%,$2%,$1)
	# $1: input absolute path. $2: optional, if you like you can use ./ to make it visually impact.
	# [2008-10-25] Convention enlightment today: Use : to represent makefile startup dir.

gmuf_StripOutputRootPrefix = $(patsubst $(gmu_ud_OUTPUT_ROOT)/%,$2%,$1)#[2007-01-09] Used by PI_sync_devoutput
#gmuf_ShortenPrjOutputDirPrefix = $(patsubst $(gmu_Gd_Deco_PrjOutput)/%,$2%,$1)#[2007-11-19] un-used yet

_StripOutputRootPrefix = $(patsubst $(gmu_ud_OUTPUT_ROOT)/%,\%/%,$1)
	#The leading % is used to represent $(gmu_ud_OUTPUT_ROOT),
	#if $1 does not start with `$(gmu_ud_OUTPUT_ROOT)/', $1 is returned.
	#Implementation note: The backslash( in \%/% ) before % is used to preserve the literal meaning of the very % .
_StripPrjOutputDirPrefix = $(patsubst $(gmu_Gd_Deco_PrjOutput)/%,!/%,$1)

_TrimCURDIR = $(patsubst $(CURDIR)/%,%,$1)

gmuf_GetStartupDir = $(if $(gmu_ud_STARTUP_DIR),$(gmu_ud_STARTUP_DIR),$(CURDIR))
	#[2009-03-06] TEMP: not considering cygwin yet

_IsNotVerbose = $(call _IsStringEqual,0,$(gmu_DO_SHOW_VERBOSE))
_IsVerboseLevel1 = $(call _IsStringEqual,2,$(gmu_DO_SHOW_VERBOSE))$(call _IsStringEqual,1,$(gmu_DO_SHOW_VERBOSE))
_IsVerboseLevel2 = $(call _IsStringEqual,2,$(gmu_DO_SHOW_VERBOSE))
_DoVerbose1 = $(if $(call _IsVerboseLevel1),$1,)
_DoVerbose2 = $(if $(call _IsVerboseLevel2),$1,)
gmuf_IsVerboseLevel1 = $(_IsVerboseLevel1)
gmuf_IsVerboseLevel2 = $(_IsVerboseLevel2)


_gmuDotList
_gmuAtcList = $(subst .,@,$(_gmuDotList))
	# Atc: "At"(@) character
	# I'd like not to use := for _gmuAtcList, to save some persistent memory allocated for make process.
	# You know, if many levels of make process are recursively run, that will cost considerable RAM.

gmuf_genspaces = $(if $1,$(foreach v,$(wordlist 1,$1,$(_gmuDotList)),)$(_GmuSpace))
	# $1: How many spaces to generate. If $1 missing, return null.

gmuf_repeatstr = $(eval _tmp:=)$(strip $(foreach v,$(wordlist 1,$(if $2,$2,0),$(_gmuDotList)),$(eval _tmp:=$(_tmp)$1)))$(_tmp)
	# $1: String to repeat. 
	# $2: repeat count. If $2 missing, return null.
	# Example:
	#  $(call gmuf_genchars,abc,2) 
	# Result:
	#  abcabc

gmuf_genspaces_2in = $(call genspaces,$1)$(call genspaces,$2)


_StrEchoForScSourceCVS = $(_GmuNull)    >CVSROOT = $1\n    > Module = $2\n    >    tag = $3
_StrEchoForScSourceSVN = $(_GmuNull)    >SVN URL = $1\n    >    rev = $2
_StrEchoForScSource = $(if $(call _IsStringEqual,$1,$(_GmuSharp)CVS),$(call _StrEchoForScSourceCVS,$2,$3,$4)\
,$(if $(call _IsStringEqual,$1,$(_GmuSharp)SVN),$(call _StrEchoForScSourceSVN,$2,$3)\
,__GMU_Unknown_SourceControl_ID)\
)
#	[2006-11-13]Special Note: 
# If you use line concatenating \ another way(shown below) for the above _StrEchoForScSource definition,
# the final value for _StrEchoForScSource will have one EXTRA space char prepended to it! Observe for
# yourself. (Appear on sh.exe from www.mame.net and on Linux as well. Why?)
ifdef __Bad_StrEchoForScSource_define
_StrEchoForScSource = $(if $(call _IsStringEqual,$1,$(_GmuSharp)CVS),$(call _StrEchoForScSourceCVS,$2,$3,$4),\
$(if $(call _IsStringEqual,$1,$(_GmuSharp)SVN),$(call _StrEchoForScSourceSVN,$2,$3),\
__GMU_Unknown_SourceControl_ID)\
)
endif

_RevertCommaInBrackets = $(subst (,),$(_GmuComma),$1)

gmuf_OutputInfo_shechoe = $(shell echo -e '$(call _RevertCommaInBrackets,$(subst ','\'',$1))' 1>&2)
	# sh.echo.e: 
	# sh: Bourne shell
	# echo: echo command 
	# e: -e option to echo

gmuf_OutputInfo380 = $(shell echo '$(call _RevertCommaInBrackets,$(subst ','\'',$1))' 1>&2)
gmuf_OutputInfo381 = $(info $(call _RevertCommaInBrackets,$1))
gmuf_OutputInfo = $(if $(_gmu_isGnumake380),$(gmuf_OutputInfo380),$(gmuf_OutputInfo381))
	# Note: This should be used in a special way if used in a make-var definition context:
	#	_info := $(call gmuf_OutputInfo,<your-message>)
	# Note for using comma: You cannot directly use a comma in $1, because a comma will be 
	# taken as function parameter separator. You can use (,) or $(_GmuComma) instead.
	#
	# Well, with GNU make 3.80's deeming out, we would prefer just use $(info ) to display our message.


gmuf_OutputInfo_e = $(shell echo -e "$(call _RevertCommaInBrackets,$(subst `,\`,$(subst ",\",$1)))" 1>&2)
	# The suffix "_e" means using -e flag for echo command.

gmuf_lastword = $(if $(_gmu_isAboveGnumake381),$(lastword $1),$(word $(words $1),$1))

gmuf_LastWordBySpc = $(call gmuf_lastword,$(subst $2, ,$1))
	# Last word by special char(spc)
	# $1: The original string.
	# $2: The special char.
	# Return the last word after the original word is split by the special char.
	#
	# Example, for SVN URL 
	#	svnurl=https://nlssvn/svnreps/makingsys/GMU-addons/nlscan/reposie-nlssvn.txt
	# ,
	#	$(call gmuf_LastWorkBySpc,$(svnurl),/)
	# will return 
	#	reposie-nlssvn.txt

gmuf_ChopFinalWord = $(wordlist 2,$(words $1),x $1)
gmuf_RemoveDuplicate = $(if $(strip $1),$(call gmuf_RemoveDuplicate,$(call gmuf_ChopFinalWord,$1)) $(if $(filter $(call gmuf_lastword,$1),$(call gmuf_ChopFinalWord,$1)),,$(call gmuf_lastword,$1)))
	# Remove duplicate words in $1, but not sorting.
	# Thanks to the GMSL library for this function

# CVS/SVN path construction functions
_MakeCvsRepsPath_Svr = $(subst --user--,$(if $($1_USER),$($1_USER),anonymous),$($1))$2
_MakeCvsRepsPath_SvrRps = $(subst --user--,$($1_USER$(subst /,_,$2)),$($1))$2
gmuf_MakeCvsRepositoryPath = $(if $($1_USER$(subst /,_,$2)),$(call _MakeCvsRepsPath_SvrRps,$1,$2),$(call _MakeCvsRepsPath_Svr,$1,$2))
	# $1: server-variable-name, $2: repository path in that server
gmuf_MakeSvnRepositoryPath = $(if $($1),$($1),$(error !GMU!Error: Your makefile requires env-var '$1' set to a SVN root URL in order to access $$$1$2))$2
	# $1 is the name of a env-var, and that env-var should not be null-value, otherwise,
	# assert error.

gmuf_RemoveTrailSlash1 = $(patsubst %/,%,$1)
gmuf_RemoveTrailSlash = $(if $1,$(if $(patsubst %/,,$1),$1,$(call gmuf_RemoveTrailSlash,$(call gmuf_RemoveTrailSlash1,$1))))
	# Remove all trailing slashes.

gmuf_GetParentDir1 = $(call gmuf_RemoveTrailSlash,$(dir $(call gmuf_RemoveTrailSlash,$1)))
	# gmuf_GetParentDir1 removes one level of dir component, dealing with multiple consecutive slashes.
	# $(call gmuf_GetParentDir1,/dir1///dir2) returns /dir1 .
	
_GetParentDirCnt = $(if $2,$(call gmuf_GetParentDir1,$(call _GetParentDirCnt,$1,$(call gmuf_CountDec,$2))),$(call gmuf_GetParentDir1,$1))
	# Note: For _GetParentDirCnt, "@" means 2, "@ @" means 3, that is, count plus 1.

gmuf_GetParentDir = $(if $(strip $2),$(call _GetParentDirCnt,$1,$(call gmuf_CountDec,$2)),$(call _GetParentDirCnt,$1,))
	# $1: Input dir(having trail slash or not both OK)
	# $2: Up level, e.g. null or "@" means 1, "@ @" means 2, "@ @ @" means 3.

gmuf_GetParentDirN = $(call gmuf_GetParentDir,$1,$(wordlist 1,$2,$(_gmuAtcList)))
	# $1: the starting path
	# $2: a number, tells the parent up level.

gmuf_GetDir = $(call gmuf_RemoveTrailSlash,$(dir $1))
	# e.g. $1 = /my/prj1/Makefile
	# Return: /my/prj1

ifneq (,$(_gmu_isAboveGnumake381))
  # On make 3.81 and above, using $(realpath ) is the accurate way.
  _p_ThisMakefile := $(realpath $(firstword $(MAKEFILE_LIST)))
else	
  _p_ThisMakefile := $(CURDIR)/$(firstword $(MAKEFILE_LIST))
  # On make 3.80, this way has limitation. When user starts a makefile by ``-f somedir/Makefile'', the result will be wrong.
endif

gmu_p_StartupMakefile := $(_p_ThisMakefile) # Note: this is different to gmu_p_RootMakefile
gmu_d_StartupMakefile := $(call gmuf_GetDir,$(_p_ThisMakefile))
gmu_d_StartupParent := $(call gmuf_GetParentDir,$(gmu_d_StartupMakefile))

gmuf_IsAbsDir = $(if $(call _IsStringEqual,$1,$(call _GetAbsDirRelaToCurdir,$1)),1)

_p_ThisMki = $(call gmuf_lastword,$(MAKEFILE_LIST))
	# return the file path of current mki
_d_ThisMki_ = $(dir $(_p_ThisMki))
	# The trailing _ in make-var name implies there is a trail slash in its value.
_d_ThisMki = $(patsubst %/,%,$(_d_ThisMki_))
	# The trailing / stripped version of $(_d_ThisMki_)
	# !!!!! NOTE using the above 3 vars. They should be used at the first line of your mki,
	# in other word, the following usage is wrong:
	#
	#	include some-dir/some-file.mki
	#	include  $(_d_ThisMki_)foo.mki
	#
	# This will inevitablely include some-dir/foo.mki instead of foo.mki in the same dir 
	# of your current mki. If you really need to include foo.mki later, write in this way:
	#
	#	_d_ThisMki_ := $(_d_ThisMki_)
	#	include some-dir/some-file.mki
	#	include  $(_d_ThisMki_)foo.mki


_KickoutPrjname = $(firstword $(subst /, ,$(patsubst $(gmu_ud_OUTPUT_ROOT)/%,%,$1)))
	#[2006-12-12] $1 is a file path, kick out(search for a better word) the GMU-Project-name in it.
	# Example:
	#   gmu_ud_OUTPUT_ROOT = /dir/gf
	#   $1 = /dir/gf/MyExe/_LinkOutputDone.gmu.ckt
	# Result:
	#	MyExe

_TrShcmd4echo = $(subst `,\`,$(subst ",\",$(subst \,\\,$1)))
	# [2006-12-15]
	# This is a very tricky function useful for generating make commands from your make file,
	# or when you want to echo a shell(bash) command(abbr. shcmd) to console/file.
	# 
	# Suppose you have a complex shcmd to execute, like
	#
	#	svn export http://site/prj1@"{2011-09-15 10:15:00}" \\serverA\devshare\prj1
	#
	# and you want to echo this shcmd to user, how should you? You may assign the whole shcmd
	# to a make variable(perfectly ok), like this:
	#
	#  svncmd = svn export http://site/prj1@"{2011-09-15 10:15:00}" \\serverA\devshare\prj1
	#
	#  Then, things get challenging. Obviously, you should not write in makefile:
	#
	#  mytarget:
	#  	@echo $(svncmd)
	# or
	#  mytarget:
	#  	@echo "$(svncmd)"
	#
	# Both will fail, resulting in 
	#
	#	svn export http://site/prj1@{2011-09-15 10:15:00} \serverAdevshareprj1
	#
	# and
	#
	#	svn export http://site/prj1@{2011-09-15 10:15:00} \serverA\devshare\prj1
	#
	# respectively. So _TrShcmd4echo comes to help. Now you write
	#
	#  mytarget:
	#  	@echo "$(call _TrShcmd4echo,$(svncmd))"
	#
	# Now, you perfectly get:
	#
	#	svn export http://site/prj1@"{2011-09-15 10:15:00}" \\serverA\devshare\prj1
	#
	# on the console, or you can get this result in output.txt by modifying makefile as:
	#
	#  mytarget:
	#  	@echo "$(call _TrShcmd4echo,$(svncmd))" > output.txt
	#
	# [[[BUT BE AWARE, _TrShcmd4echo does not support $ in shcmd yet !]]]
	#
	# I think this mechanism provides more flexibility than using a conditional @ to suppress 
	# shcmd echoing, which still exhibits some bug in GNU make 3.81 .
	#
	# A more complex example:
	# Suppose you have an original shell command(shcmd):
	#	cvs ci -m "my \\gosh"
	# and you write my2.mk as follows:
#OrigShCmd = cvs ci -m "my \\gosh"
#my2:
#	echo -e -n "my1:\n\t" > my1.mk; echo "$(call _TrShcmd4echo,echo "$(call _TrShcmd4echo,$(OrigShCmd))" > OrigShCmd.txt)" >> my1.mk
	#
	# Then you run two commands:
	#	make -f my2.mk; make -f my1.mk
	# Now, OrigShCmd.txt is generated with the content identical to your original shell command.

_TrShcmd4echo_4bs = $(subst `,\`,$(subst ",\",$(subst \,\\\\,$1)))
	# [2006-12-15]
	# This is similar to _TrShcmd4echo, but it should be used if the `-e' param of echo gets
	# in the way. For example, you can use this make command to get the same OrigShCmd.txt
	# content as in the previous example:
#	echo -e -n "all:\n\t$(call _TrShcmd4echo_4bs,echo -e "$(call _TrShcmd4echo_4bs,$(OrigShCmd))" > OrigShCmd.txt)" > my1.mk
	#
	# Now you see $(subst \,\\\\,$1)) instead of $(subst \,\\,$1)) because 'echo -e' will half the backslashes.

#_TrShcmd4echo_spd = $(subst !$$!,\$$\$$,$(subst ^$$^,\$$,$(subst `,\`,$(subst ",\",$(subst \,\\,$1)))))
_TrShcmd4echo_4bs_spd_pnt = $(subst !^t,\t,$(subst !^n,\n,$(subst !$$!,\$$\$$,$(subst ^$$^,\$$,$(call _TrShcmd4echo_4bs,$1)))))
	# spd: special process for dollar char. pnt: preserve \n \t
_EvRevoke_for_spd = $(subst \$$,^$$^,$1)

_CountCompileChar = $(shell gmuCountChar $(gmu_Gp_COUNT_COMPILE) $1)
_JoinResultCharCount = $(join $1,$(call _CountCompileChar,$2))


_TrOutputRootShEnvPrefix = $(patsubst $(gmu_ud_OUTPUT_ROOT)/%,$${gmu_ud_OUTPUT_ROOT}/%,$1)


_AppendLogCountCompile = echo -n "$(1)" >> $(gmu_Gp_COUNT_COMPILE) # add one byte to the count-file
	# Move it here because _DoCheckout.gmu.mk use this to count action as well.


_StrAfterTilde = $(if $(findstring ~,$1),$(word 2,$(subst ~, ,$1)),$1)
	# $1 must not contain space !
_StrBeforeFinalDot = $(if $(findstring .,$1),$(basename $1),$1)
	# $1 must not contain space !
	# Return the substring before the final dot.
_FirstWordBeforeDot = $(word 1,$(subst ., ,$1))
_DeduceUPrjname_lvl1 = $(call _StrBeforeFinalDot,$(call _StrAfterTilde,$1))
	# $1 must not contain space !
	# $1 is the decorated prjname
	#
	# Example:
	#	arm~walkdir._D         => walkdir
	#	arm~walkdir.xyz._D     => walkdir.xyz
_DeduceUPrjname_lvl2 = $(call _FirstWordBeforeDot,$(call _StrAfterTilde,$1))
_Gf_pir_PrjOutput = $(if $(call _IsStringEqual,2,$(gmu_GFEXTRASUBDIR)),$(call _DeduceUPrjname_lvl2,$1)/,$(if $(gmu_GFEXTRASUBDIR),$(call _DeduceUPrjname_lvl1,$1)/))$1
	# Return the partial dir component of the project output dir.
	# $1 is the decorated(final) prjname.

gmuf_GetPrjOutputDir = $(gmu_ud_OUTPUT_ROOT)/$(call _Gf_pir_PrjOutput,$1)
gmuf_GetPrjTmpDir = $(call gmuf_GetPrjOutputDir,$1)/_gmu_tmp
	# $1: final prjname 


gmuf_IsPureFilename = $(call _IsStringEqual,$(notdir $1),$1)
	# Yes:	Makefile
	# No:	dir/Makefile
	# Yes:	.   (this is exception, user should avoid this)

gmuf_substs = $(strip $(eval _tmp:=$3)$(foreach w,$1,$(eval _tmp:=$(subst $w,$2,$(_tmp))))$(_tmp))
	# For every word in($w) $1, do $(subst $w,$2,$3) .
	# Example:
	#	$(call gmuf_substs,/ :,_,C:/dir1/abc/Makefile)
	# produce:
	#	C__dir1_abc_Makefile

#_StripDotDotSlash = $(subst ../,,$1)
_AutoRefnameFromMkfpath_pdp = $(call gmuf_substs,/ :,%,$(subst ../,,$(call gmuf_GetDir,$1)))
	# _pdp: implies $1 is Path with Dir Prefix
_AutoRefnameFromMkfpath = $(if $(call gmuf_IsPureFilename,$1),$(strip $1),$(call _AutoRefnameFromMkfpath_pdp,$1))
	# Example:
	#	$(call _AutoRefnameFromMkfpath,../dir1/abc/Makefile)
	# produce
	#	dir1%abc

define _gmuf_Add1Subprj_Concise
  # $1: Makefile path
  # $2: (optional) extra string passed to _MakeVarDefines
  gmu_uv_list_ALL_SUBPRJ += $$(call _AutoRefnameFromMkfpath,$1)
  $$(call _AutoRefnameFromMkfpath,$1)_Makefile = $1
  $$(call _AutoRefnameFromMkfpath,$1)_MakeVarDefines = $2
endef
gmuf_AddSubprjs_Concise = $(foreach makefile,$(call _gmu_bs2fs,$1),$(eval $(call _gmuf_Add1Subprj_Concise,$(makefile),$2)))


# Functions for source control branch management, 

define gmue_SvnDeclareBranch # Use this with $(eval $(call gmue_SvnDeclareBranch,param1,param2)) .
  # $1: Env-var corresponding to an SVN repository.
  # $2: Branch(just one or some directory component(s) here) name to use.
  ifeq (,$$($1)) # if env-var is not defined, then
    export $1 = $2
  endif
endef

gmuf_SvnDeclareDefaultTrunk = $(eval $(call gmue_SvnDeclareBranch,$1,trunk))
	# $1: same meaning as that of gmue_SvnDeclareBranch

_export_MakevarDefs = $(if $1,export $1;)
	# $1 can be multiple var-assignments separated by spaces.

define _AnounceExportEnvvar
  ifneq (,$(_isNowNotGmuGetPrjAttr))
  ifeq (,$(MAKE_RESTARTS)) # only when a make project is first started.
    $$(info In $$(gmu_p_StartupMakefile): gmuf_AnounceExportEnvvar: $1)
  endif
  endif
  export $1
endef

gmuf_AnounceExportEnvvar = $(eval $(call _AnounceExportEnvvar,$1))
	# $1 is var assignment, such as ``myvar=myval'' or ``myvar := myval''

gmuf_AnounceExportEnvvars = $(foreach p,$1,$(call gmuf_AnounceExportEnvvar,$p))
	# Export multiple env-vars(with optional value assignment)
	# $1: Space separated var=val pairs.
	# NOTE: If any `val' contains spaces, don't use this function, use gmuf_AnounceExportEnvvar one by one instead.

gmuf_CvsDatatimeParam = -D "$1"
gmu_CvsCmdUseGmuGivenTime = -D "$(gmu_SC_CHECKOUT_DATETIME)"

gmuf_SvnDatetimeParam = -r "{$1}"
gmu_SvnCmdUseGmuGivenTime = -r "{$(gmu_SC_CHECKOUT_DATETIME)}"


#gmuf_EnvVal_ci = $($(filter $1,$(call gmuf_ToCapital,$(.VARIABLES))))
_gmuf_EnvVal_ci = $(strip $(foreach v,$(.VARIABLES),$(if $(call _IsStringEqual,$(call gmuf_ToCapital,$v),$1),$($v))))
gmuf_EnvVal_ci = $(call _gmuf_EnvVal_ci,$(call gmuf_ToCapital,$1))
	# Get env-var's value, regardless of case of env-var name (useful on Windows)
	# $1: Env-var name, case does not matter!
	#
	# Note: If you have two env-vars with the same name except case, only one value of them will be returned.

gmuf_IsUsingWindowsCmd = $(call gmuf_IsSubString,\cmd.exe,$(call gmuf_EnvVal_ci,ComSpec))
	# Check if we are running from a Windows cmd.exe shell.

gmuf_ScriptCmd = $(if $(gmuf_IsUsingWindowsCmd),cmd /C "$(subst \,\\,$1)",$1)
	# $1: the shell command
	# Example:
	#	$(call gmuf_ScriptCmd,version-sync.py --version)
	# return on Windows:
	#	cmd /C "version-sync.py --version"
	#
	# LIMITATION: The script command described by $1 is not strictly portable across Windows and Linux.
	# * If there is no special chars like ' " or \ , it is portable across Windows and Linux.
	# * But if there are any those special chars, the caller of gmuf_ScriptCmd should care for the 
	#   portability himself.
	#
	# NOTE for Windows CMD: 
	# * Replacing \ to \\ is a must because user may pass in UNC path like 
	#	--dir-store=\\winshad0\devshare\tmpSymbols
	#   Without the replacement, "sh -c" will swallow them.
	# * Replacing " to \" should not be carried out, due to the nature of``cmd /c'' !
	

_gmpfHideSpace = $(subst $(_GmuSpace),@,$(subst \,/,$(strip $1)))
	# Example: $1=
	#	C:\my\inc;E:\vs 2005\inc;
	# returns
	#	C:/my/inc;E:/vs@2005/inc;

gmpf_gccM_DesectPathList = $(subst @, ,$(patsubst %,-isystem "%",$(subst $2, ,$(call _gmpfHideSpace,$1))))
	# Example:
	# $1=C:\my\inc;E:\vs 2005\inc;
	# $2=;
	# returns
	#	-isystem "C:/my/inc" -isystem "E:/vs 2005/inc"
	#
	# This is used by compiler config used with VC++ command line env.
	# MSVC is special that its paths in INCLUDE env-var normally have *spaces*,
	# so we cannot simply append -isystem to each word of it. So this function comes to help.
	#
	# Usage example:
	#	_gmu_isystem_DIRS_WRAP_QUOTES := $(call gmpf_gccM_DesectPathList,$(INCLUDE),;)

gmuf_pick_one_cver_by_cid = $(patsubst $1$(_GmuComma)%,%,$(firstword $(filter $1$(_GmuComma)%,$2)))
	# Example:
	#	$1 = msvc
	#	$2 = wince,vc80ppc msvc,vc80 msvc,vc90x64
	#
	# will return 
	#	vc80
	#
	# If no matching compiler-id substring found in $2, just return null.
	#
	# Usage sample:
	#	$(call gmuf_pick_one_cver_by_cid,msvc,wince$(_GmuComma)vc80ppc msvc$(_GmuComma)vc80 msvc$(_GmuComma)vc90x64)
	#
	# Used in _Makefile-vbuxm (generated by genmk-sdk.py)


_gmu_SHCMD_ALERT_ERROR = $(if $(strip $(gmu_SHCMD_ALERT_ERROR)),$(gmu_SHCMD_ALERT_ERROR),true)
	# Used when gmu_INTERACTIVE_ERROR_RETRY=1

endif # ifndef _CommonFunctions_included 
