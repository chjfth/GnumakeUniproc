ifndef __pattern1_load_plugins_mki
__pattern1_load_plugins_mki := 1

# >>>>>> Load custom plugins [2006-12-04]

gmpf_GetPluginPath_std = $(filter %/$1.mki,$(gmp_Gp_list_PLUGIN_LOADED))
	# $1: Plugin name

gmpf_GetPluginParentDir = $(patsubst %/$1/$1.mki,%,$(call gmpf_GetPluginPath_std,$1))

gmpf_GetPluginPostcorePath_std = $(patsubst %/$1.mki,%/$1.$2.mki,$(call gmpf_GetPluginPath_std,$1))
	#[2006-12-04] A standard method to get the path of a plugin's post-core part.
	# $1: plugin name; $2: the suffix appended to the plugin's name
	# Example: If $1 is list in $(gmp_Gp_list_PLUGIN_LOADED) as `/dir1/MyPlugin/MyPlugin.mki',
	# $2 is `postcore', then the post-core path name is `/dir1/MyPlugin/MyPlugin.postcore.mki'
#The above three gmpf_GetPluginXXX functions can be used in plugin-mki or plugin-postcore-mki.

gmpv_ThisPluginId = $(basename $(notdir $(call gmuf_lastword,$(MAKEFILE_LIST))))
	#[2007-02-01] This should be assigned to a make-var with := , because $(MAKEFILE_LIST) is volatile.
	#Also be aware not to abuse this var, especially in a deferred expansion context, where it 
	#does not produce correct result.

#	For every plugin(plugin name) listed in $(gmp_u_list_PLUGIN_TO_LOAD), 
# search all dirs listed in $(gmp_ud_list_CUSTOM_MKI) for the first occurrence
# of <dir>/<plugin>/<plugin>.mki and include it.
#	And as a last resort, check $(gmu_DIR_GNUMAKEUNIPROC)/$(_dircDefaultPlugin) for that plugin.

gmp_u_list_PLUGIN_TO_LOAD_AUX_PRE += $(gmp_u_list_PLUGIN_TO_LOAD_AUX)
	# For compatibility of the old gmp_u_list_PLUGIN_TO_LOAD_AUX.

# >>> Compatibility code for old var gmu_u_list_PLUGIN_TO_LOAD_ENV_PRE/POST before r651(2008-10-10)(appeared in GnumakeUniproc v0.94)
#gmp_u_list_PLUGIN_TO_LOAD_ENV_PRE+=$(gmu_list_PLUGIN_TO_LOAD_ENV_PRE)
#gmp_u_list_PLUGIN_TO_LOAD_ENV_POST+=$(gmu_list_PLUGIN_TO_LOAD_ENV_POST)
						# [2016-03-09] GMU 0.100: Now remove this to avoid gmp_u_list_PLUGIN_TO_LOAD_ENV_PRE duplication each time entering a deeper subprj.
# <<< Compatibility code (END)

_gmp_AllPlugins = $(call gmuf_RemoveDuplicate,\
	$(gmp_u_list_PLUGIN_TO_LOAD_ENV_PRE) \
		$(gmp_u_list_PLUGIN_TO_LOAD_AUX_PRE) \
			$(gmp_u_list_PLUGIN_TO_LOAD) \
		$(gmp_u_list_PLUGIN_TO_LOAD_AUX_POST) \
	$(gmp_u_list_PLUGIN_TO_LOAD_ENV_POST))

_gmpf_UserPluginsPaths_s1 = $(foreach _PlugIn,$1,\
	$(firstword \
		$(foreach _Dir,$(gmp_ud_list_CUSTOM_MKI) $(gmu_DIR_GNUMAKEUNIPROC)/$(_dircDefaultPlugin),\
			$(wildcard $(_Dir)/$(_PlugIn)/$(_PlugIn).mki))\
		$(_PlugIn)__gmuInvlPiM \
	)\
) # $1: plugin name list. s1: stage1, implies that missing plugin will get __gmuInvlPiM suffix instead of plugin path.

define _gmpf_LoadPluginsOnce
  # $1: plugin name list
  _list_p_PluginToLoadNow := $$(call _gmpf_UserPluginsPaths_s1,$1)

  _list_G_PluginToLoadNow := $$(notdir $$(basename $$(_list_p_PluginToLoadNow)))

  _InvalidPluginList := $$(patsubst %__gmuInvlPiM,%,$$(filter %__gmuInvlPiM,$$(_list_p_PluginToLoadNow)))
  ifneq (,$$(strip $$(_InvalidPluginList)))
    $$(error !GMU!Error: The following plugin(s) cannot be loaded: $$(_InvalidPluginList))
  endif

  ifneq (,$$(_list_p_PluginToLoadNow))
    ifeq ($$(_IsVerboseLevel2),$(_gmu_true))
    ifeq (,$$(_isNowGmuGetPrjAttr)) #if not doing _gmu_ut_GetPrjAttr
    ifeq (,$$(MAKE_RESTARTS))
      $$(call gmuf_OutputInfo,The following plugin(s) are to be loaded:)
      $$(foreach _PlugInPath,$$(_list_p_PluginToLoadNow),$$(call gmuf_OutputInfo,  $$(_PlugInPath)))
    endif
    endif
    endif
    include $$(_list_p_PluginToLoadNow)
  endif
endef # define _gmpf_LoadPluginsOnce

define _gmpf_LoadPluginsOnceX 
  # Input: _list_u_PluginToLoadNow
  ifneq (,$$(strip $$(_list_u_PluginToLoadNow)))
    gmp_G_list_PLUGIN_LOADED := $$(gmp_G_list_PLUGIN_LOADED) $$(_list_u_PluginToLoadNow)
    gmp_Gp_list_PLUGIN_LOADED := $$(call _gmpf_UserPluginsPaths_s1,$$(gmp_G_list_PLUGIN_LOADED))
      # [2011-03-27]Note: The _LOADED suffix is a bit of misnomer. They are actually loaded
      # after the very following _gmpf_LoadPluginsOnce eval-call. The reason for current situation is: 
      # By convention, most plugin code will call gmpf_GetPluginPostcorePath_std like this
      #      
      #		gmp_up_list_PLUGIN_POSTCORE_TO_LOAD += $(call gmpf_GetPluginPostcorePath_std,$(_pluginId_xxx),postcore)
      #
      # who eventually refers to gmp_G_list_PLUGIN_LOADED. But wait, you may have noticed that 
      # the above gmp_up_list_PLUGIN_POSTCORE_TO_LOAD is assigned with += , which means
      # gmp_Gp_list_PLUGIN_LOADED availability at that moment is not important. Oh yes,
      # the second reason is: I just want to ease debugging by peeking gmp_Gp_list_PLUGIN_LOADED's 
      # content right after its assignment.
      # Anyhow, setting gmp_Gp_list_PLUGIN_LOADED one step ahead will not cause harm.
    $$(eval $$(call _gmpf_LoadPluginsOnce,$$(_list_u_PluginToLoadNow)))
    
    _list_u_PluginToLoadNow := $$(filter-out $$(gmp_G_list_PLUGIN_LOADED),$$(_gmp_AllPlugins))
  endif
endef

_list_u_PluginToLoadNow := $(_gmp_AllPlugins)
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
$(eval $(call _gmpf_LoadPluginsOnceX))
ifneq (,$(_list_u_PluginToLoadNow))
  $(error !GMP!Error: Plugin recursive loading exceeds max level. Plugins pending to load: $(_list_u_PluginToLoadNow))
endif

# <<<<<< Load custom plugins [2006-12-04]

endif # __pattern1_load_plugins_mki
